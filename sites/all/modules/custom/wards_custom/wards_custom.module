<?php

function bar128($text) {
  global $char128asc,$char128wid;
  $char128asc=' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~';
$char128wid = array(
	'212222','222122','222221','121223','121322','131222','122213','122312','132212','221213', // 0-9
	'221312','231212','112232','122132','122231','113222','123122','123221','223211','221132', // 10-19
	'221231','213212','223112','312131','311222','321122','321221','312212','322112','322211', // 20-29
	'212123','212321','232121','111323','131123','131321','112313','132113','132311','211313', // 30-39
	'231113','231311','112133','112331','132131','113123','113321','133121','313121','211331', // 40-49
	'231131','213113','213311','213131','311123','311321','331121','312113','312311','332111', // 50-59
	'314111','221411','431111','111224','111422','121124','121421','141122','141221','112214', // 60-69
	'112412','122114','122411','142112','142211','241211','221114','413111','241112','134111', // 70-79
	'111242','121142','121241','114212','124112','124211','411212','421112','421211','212141', // 80-89
	'214121','412121','111143','111341','131141','114113','114311','411113','411311','113141', // 90-99
	'114131','311141','411131','211412','211214','211232','23311120');
  $w = $char128wid[$sum = 104];							// START symbol
  $onChar=1;
  for($x=0;$x<strlen($text);$x++)								// GO THRU TEXT GET LETTERS
    if (!( ($pos = strpos($char128asc,$text[$x])) === false )){	// SKIP NOT FOUND CHARS
	  $w.= $char128wid[$pos];
	  $sum += $onChar++ * $pos;
	}
  $w.= $char128wid[ $sum % 103 ].$char128wid[106];  		//Check Code, then END
	 					 						//Part 2, Write rows
  $html="<table cellpadding=0 cellspacing=0><tr>";
  for($x=0;$x<strlen($w);$x+=2)   						// code 128 widths: black border, then white space
	$html .= "<td><div class=\"b128\" style=\"border-left-width:{$w[$x]};width:{$w[$x+1]}\"></div>";
  return "$html<tr><td  colspan=".strlen($w)." align=center><font family=arial size=2><b>$text</table>";
}

// Barcode function end here
function wards_custom_node_form_submit($form_id, $form_values) {
  drupal_set_message(t('Your %post.', array('%post' => node_get_types('name', $node))));
}

function wards_custom_page_build(&$page) {
  if(arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit') {
    $nid = arg(1);
    $node = node_load($nid);
    if($node->type == 'job') {
      if($node->status == 0) {
        drupal_set_title('New Job');
      }
      else drupal_set_title('Edit Job');
    }
    if($node->type == 'manifest') {
      if($node->status == 0) {
        drupal_set_title('New Manifest');
      }
      else drupal_set_title('Edit Manifest');
    }
  }
}

function wards_custom_menu() {
  $items = array();
  $items['scan/updates'] = array(
    'title' => 'Scan Updates',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scan_update_form'),
    'access callback' => TRUE,
  );
  $items['create-job'] = array(
    'page callback' => 'create_job',
    'access callback' => TRUE,
  );
  $items['connote/data/print'] = array(
     'page callback'=>'connote_data_print',
     'type' => MENU_CALLBACK,
     'access arguments' => array('access content'),
 );
  $items['connote/data/print/pdf'] = array(
     'page callback'=>'connote_data_print_pdf',
     'type' => MENU_CALLBACK,
     'access arguments' => array('access content'),
 );
  $items['fest/data/print/pdf'] = array(
      'page callback'=>'fest_data_print_pdf',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
  );
  $items['manifest/data/print/ajax'] = array(
      'page callback'=>'manifest_data_print_ajax',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
  );
  $items['manifest/labels/print/pdf'] = array(
      'page callback'=>'manifest_labels_print_pdf',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
  );
  $items['jobs/data/print/ajax'] = array(
      'page callback'=>'jobs_data_print_ajax',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
  );
  $items['job/labels/print/pdf'] = array(
      'page callback'=>'job_labels_print_pdf',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
  );
  $items['customer/details/ajax_a'] = array(
     'page callback'=>'customer_details_ajax_a',
     'type' => MENU_CALLBACK,
     'access arguments' => array('access content'),
 );
 $items['suburb/ajax'] = array(
    'page callback'=>'suburb_ajax',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
);
  $items['dashboard'] = array(
    'title' => 'Dashboard',
    'page callback'=>'dashboard_content',
    'access callback' => 'user_access',
    'access callback' => TRUE,
  );

  return $items;
}

function dashboard_content() {
  $output = theme('dashboard_content');
  return $output;
}

function create_job() {
  global $user;
  $node = new stdClass();
  $node->type = 'job';
  $node->language = LANGUAGE_NONE;
  node_object_prepare($node);

  $node->status = 0;
  $node->promote = 0;
  $node->sticky = 0;
  $node->comment = 1;
  $node->uid = $user->uid;

  node_save($node);
  drupal_goto('node/'.$node->nid.'/edit');
}

/**
 * Implements hook_theme().
 */
function wards_custom_theme($existing, $type, $theme, $path) {
  return array(
    'job_node_form' => array(
      'render element' => 'form',
      'template' => 'job-node-form',
      'path' => drupal_get_path('module', 'wards_custom').'/templates',
    ),
    'manifest_node_form' => array(
      'render element' => 'form',
      'template' => 'manifest-node-form',
      'path' => drupal_get_path('module', 'wards_custom').'/templates',
    ),
    'customer_node_form' => array(
      'render element' => 'form',
      'template' => 'customer-node-form',
      'path' => drupal_get_path('module', 'wards_custom').'/templates',
    ),
    'display_modal' => array(
      'template' => 'display-modal',
      'variables' => array('content' => NULL, 'modal_id' => NULL),
      'path' => drupal_get_path('module', 'wards_custom').'/templates',
    ),
    'display_modal_header' => array(
      'template' => 'display-modal-header',
      'variables' => array('id' => NULL, 'title' => NULL),
      'path' => drupal_get_path('module', 'wards_custom').'/templates',
    ),
    'display_modal_footer' => array(
      'template' => 'display-modal-footer',
      'path' => drupal_get_path('module', 'wards_custom').'/templates',
    ),
    'dashboard_content' => array(
      'template' => 'dashboard-content',
      'path' => drupal_get_path('module', 'wards_custom').'/templates',
    ),
    'jobs_print' => array(
     'template' => 'jobs-print',
     'path' => drupal_get_path('module', 'wards_custom') . '/templates',
    ),
    'labels_print' => array(
     'template' => 'labels-print',
     'path' => drupal_get_path('module', 'wards_custom') . '/templates',
    ),
  );
}

function wards_custom_form_alter(&$form, &$form_state, $form_id) {
  // if($form_id == 'node_delete_confirm'){
  //   $form['description']['#markup'] = 'Are you sure you want to delete ?';
  //   $form['actions']['submit']['#value'] = 'Yes';
  //   $form['actions']['cancel']['#title'] = 'No';
  // //  echo"<pre>"; print_r($form); die();
  // }

    dpm($form);

  if($form_id  == "field_collection_ajax_edit_item_form"){
    $form['#attributes']['autocomplete'] = 'off';
    $form['#validate'][] = 'pricing_form_validate';
    $form['field_apply_reversed_price']['und']['#title'] = 'Apply Reversed Price?';

     if(isset($form['field_price_by_weight'])) {
         $form['field_price_by_weight'][LANGUAGE_NONE]['add_more']['#element_validate'][] = 'individual_pricing_validate_weight';
         $form['field_price_by_weight']['#prefix'] =  theme('display_modal_header', array( 'title' => 'Add Price by Weight'));
         $form['field_price_by_weight']['#suffix'] =  theme('display_modal_footer');
     }
     if(isset($form['field_price_by_pl_spc'])) {
         $form['field_price_by_pl_spc']['und']['add_more']['#element_validate'][] = 'individual_pricing_validate_pl_spc';
    	 $form['field_price_by_pl_spc']['#prefix'] =  theme('display_modal_header', array( 'title' => 'Add Price by Pl Spc'));
    	 $form['field_price_by_pl_spc']['#suffix'] =  theme('display_modal_footer');
     }

     if(isset($form['field_price_by_weight']['und'][0]['field_from_range'])) {
		$form['field_price_by_weight']['und'][0]['field_from_range']['und'][0]['value']['#type'] = 'value';
        $form['field_price_by_weight']['und'][0]['field_from_range']['und'][0]['value']['#value'] = 0;
        $form['field_price_by_weight']['und'][0]['field_from_range']['und'][0]['value']['#suffix'] =  "0 kg";

        $tot_key = 0;
        foreach($form['field_price_by_weight']['und'] as $key => $value){
          if(!is_numeric($key)) continue;
          $tot_key++;
        }

        foreach($form['field_price_by_weight']['und'] as $key => $value) {
         //skip if non numeric key, which means these are not the actual subitems and are merely array properties
        	if(!is_numeric($key)) continue;

          if(isset($form['field_price_by_weight'][LANGUAGE_NONE][$key]['field_to_range'])) {
            if($key > 0){
              $form['field_price_by_weight']['und'][$key+1]['field_from_range']['und'][0]['value']['#default_value'] = $form['field_price_by_weight']['und'][$key]['field_to_range']['und'][0]['value']['#default_value'] + 1;
              $form['field_price_by_weight']['und'][$key+1]['field_from_range']['und'][0]['value']['#type'] = 'value';
              $form['field_price_by_weight']['und'][$key+1]['field_from_range']['und'][0]['value']['#suffix'] = $form['field_price_by_weight']['und'][$key+1]['field_from_range']['und'][0]['value']['#default_value']." kg";
            }
            $form['field_price_by_weight']['und'][1]['field_from_range']['und'][0]['value']['#type'] = 'value';
            $form['field_price_by_weight']['und'][1]['field_from_range']['und'][0]['value']['#default_value'] = $form['field_price_by_weight']['und'][0]['field_to_range']['und'][0]['value']['#default_value'] + 1;
            $form['field_price_by_weight']['und'][1]['field_from_range']['und'][0]['value']['#suffix'] =  $form['field_price_by_weight']['und'][1]['field_from_range']['und'][0]['value']['#default_value']." kg";

            if(($key < $tot_key -2) && $tot_key > 1) {
              $form['field_price_by_weight']['und'][$key]['field_to_range']['und'][0]['value']['#attributes']['disabled'] = 'disabled';
            }
          }
        }
     }

    if(isset($form['field_price_by_pl_spc']['und'][0]['field_from_range'])) {
    $form['field_price_by_pl_spc']['und'][0]['field_from_range']['und'][0]['value']['#type'] = 'value';
    $form['field_price_by_pl_spc']['und'][0]['field_from_range']['und'][0]['value']['#value'] = 0;
    $form['field_price_by_pl_spc']['und'][0]['field_from_range']['und'][0]['value']['#suffix'] =  0;

    $tot_key = 0;
    foreach($form['field_price_by_pl_spc']['und'] as $key => $value){
      if(!is_numeric($key)) continue;
      $tot_key++;
    }

    foreach($form['field_price_by_pl_spc']['und'] as $key => $value){
      //skip if non numeric key, which means these are not the actual subitems and are merely array properties
      if(!is_numeric($key)) continue;
      if(isset($form['field_price_by_pl_spc']['und'][$key]['field_to_range'])) {
        if($key > 0){
          $form['field_price_by_pl_spc']['und'][$key+1]['field_from_range']['und'][0]['value']['#default_value'] = $form['field_price_by_pl_spc']['und'][$key]['field_to_range']['und'][0]['value']['#default_value'] + 1;
          $form['field_price_by_pl_spc']['und'][$key+1]['field_from_range']['und'][0]['value']['#type'] = 'value';
          $form['field_price_by_pl_spc']['und'][$key+1]['field_from_range']['und'][0]['value']['#suffix'] = $form['field_price_by_pl_spc']['und'][$key+1]['field_from_range']['und'][0]['value']['#default_value'];
        }

        $form['field_price_by_pl_spc']['und'][1]['field_from_range']['und'][0]['value']['#type'] = 'value';
        $form['field_price_by_pl_spc']['und'][1]['field_from_range']['und'][0]['value']['#default_value'] = $form['field_price_by_pl_spc']['und'][0]['field_to_range']['und'][0]['value']['#default_value'] + 1;
        $form['field_price_by_pl_spc']['und'][1]['field_from_range']['und'][0]['value']['#suffix'] =  $form['field_price_by_pl_spc']['und'][1]['field_from_range']['und'][0]['value']['#default_value'];

        if(($key < $tot_key - 2) && $tot_key > 1) {
          $form['field_price_by_pl_spc']['und'][$key]['field_to_range']['und'][0]['value']['#attributes']['disabled'] = 'disabled';
        }
      }
    }
  }
  }
  if($form_id == 'views_exposed_form') {
      if ($form_state['view']->name == "freight_management_job") {
          $form['created']['max']['#attributes']['placeholder'] = t( "Enter Date" );
          $form['created']['min']['#attributes']['placeholder'] = t( "Enter Date" );
          $form['outstand'] = array(
              '#title' => t('Outstanding'),
              '#type' => 'checkbox',
              '#weight' => -1,
          );
      }

//      UPDATED BY LEE
      if ($form_state['view']->name == '_manage_customer') {
          $form['field_pricing_plan_target_id']['#options'] += array('None' => t('No Plan'));
      }

  }
  if ($form_id == 'customer_node_form') {
    $form['#attributes']['autocomplete'] = 'off';
    $form['add_plan_link'] = array('#type' => 'markup', '#markup' => '<span class="add-plan-link">If plan does not exist, <a href="?q=/node/add/pricing" target="_blank">Create a Plan</a></span>');
    $form['refresh_plan_list'] = array('#type' => 'submit', '#value' => 'Refresh Plan List', '#weight' => -999, '#prefix' => '<div class="refresh-plan">', '#suffix' => '</div>');

    $form['refresh_plan_list']['#executes_submit_callback'] = FALSE;
    $form['refresh_plan_list']['#limit_validation_errors'] = array();

    $form['refresh_plan_list']['#ajax'] = array('wrapper' => 'plan-list', 'callback' => 'refresh_plan_list_callback');

    $form['field_pricing_plan']['#prefix'] = '<div id="plan-list">';
    $form['field_pricing_plan']['#suffix'] = '</div>';
    $form['field_pricing_plan']['#validated'] = TRUE;

    $form['field_primary_address']['und'][0]['field_postal_code_']['und'][0]['value']['#attributes']['readonly'] = 'readonly';
    $form['field_business_address']['und'][0]['field_postal_code_']['und'][0]['value']['#attributes']['readonly'] = 'readonly';
    $form['field_residential_address']['und'][0]['field_postal_code_']['und'][0]['value']['#attributes']['readonly'] = 'readonly';
    $form['field_other_address']['und'][0]['field_postal_code_']['und'][0]['value']['#attributes']['readonly'] = 'readonly';

    $form['field_primary_address']['und'][0]['field_closing']['und'][0]['value']['#title'] = $form['field_primary_address']['und'][0]['field_closing']['und'][0]['#title'];
    $form['field_business_address']['und'][0]['field_closing']['und'][0]['value']['#title'] = $form['field_business_address']['und'][0]['field_closing']['und'][0]['#title'];
    $form['field_residential_address']['und'][0]['field_closing']['und'][0]['value']['#title'] = $form['field_residential_address']['und'][0]['field_closing']['und'][0]['#title'];
    $form['field_other_address']['und'][0]['field_closing']['und'][0]['value']['#title'] = $form['field_other_address']['und'][0]['field_closing']['und'][0]['#title'];

  }
  if ($form_id == 'job_node_form') {

      // dpm($form_state);

      if ($form_state['clicked_button']['#value'] == 'Copy') {
          dpm($form_state);
      }

    $form['#attributes']['autocomplete'] = 'off';

    $form['field_invoice_no'][LANGUAGE_NONE][0]['value']['#attributes'] = array('disabled' => 'disabled');

    $form['field_delivery_status']['#suffix'] = '<div id="pickup_click"><span id="pickup_click_value" class="btn btn-success">Pickup</span></div><div id="recieved_in_click"><span id="recieved_in_click_value"class="btn btn-success">Recieved In</span></div>';
  	 $nid = $form['nid']['#value'];
  	 $job = node_load($nid);

  	 $job_id = $job->field_job_no['und'][0]['value'];

  	 if($job->status == 0) {
  	   $form['field_current_branch']['und']['#attributes']['disabled'] = 'disabled';
  	 }

  	 $form['field_ready_time']['und'][0]['value']['#title'] = 'Ready Time';

    if($form['field_ready']['und'][0]['#default_value'] == '') {
  	   $form['field_ready']['und'][0]['#default_value']['value'] = date('n/d/Y');
  	 }

     if($form['field_ready_time']['und'][0]['value']['#default_value'] == ''){
         $form['field_ready_time']['und'][0]['value']['#default_value']['value'] = date("h:i a");
     }

  	 $form['field_job_no']['und'][0]['value']['#attributes']['readonly'] = 'readonly';
  	 $form['field_connote_no']['und'][0]['value']['#attributes']['readonly'] = 'readonly';

    $form['field_customer']['#prefix'] = '<div id="customer-list">';
    $form['field_customer']['#suffix'] = '</div>';
    $form['field_customer']['#validated'] = TRUE;

    $form['field_origin']['und'][0]['field_sender_name']['#prefix'] = '<div id="origin-customer-list">';
    $form['field_origin']['und'][0]['field_sender_name']['#suffix'] = '</div>';
    $form['field_origin']['und'][0]['field_sender_name']['#validated'] = TRUE;

    $form['field_origin']['und'][0]['field_postal_code_']['und'][0]['value']['#attributes']['readonly'] = 'readonly';
    $form['field_destination']['und'][0]['field_postal_code_']['und'][0]['value']['#attributes']['readonly'] = 'readonly';

    $form['field_destination']['und'][0]['field_receiver_name']['#prefix'] = '<div id="destination-customer-list">';
    $form['field_destination']['und'][0]['field_receiver_name']['#suffix'] = '</div>';
    $form['field_destination']['und'][0]['field_receiver_name']['#validated'] = TRUE;

    $form['field_origin']['und'][0]['field_state']['#prefix'] = '<div id="origin-state-list">';
    $form['field_origin']['und'][0]['field_state']['#suffix'] = '</div>';
    $form['field_origin']['und'][0]['field_state']['#validated'] = TRUE;

    $form['field_destination']['und'][0]['field_state']['#prefix'] = '<div id="destination-state-list">';
    $form['field_destination']['und'][0]['field_state']['#suffix'] = '</div>';
    $form['field_destination']['und'][0]['field_state']['#validated'] = TRUE;

    $form['publish_node'] = array('#type' => 'value', '#value' => 1);

    $form['refresh_customer_list'] = array('#type' => 'submit', '#value' => 'Refresh', '#prefix' => '<div class="customer_refresh">', '#suffix' => '</div>');
    $form['refresh_customer_list']['#executes_submit_callback'] = FALSE;
    $form['refresh_customer_list']['#limit_validation_errors'] = array();
    $form['refresh_customer_list']['#ajax'] = array('wrapper' => 'customer-list', 'callback' => 'refresh_customer_list_callback');

    $form['#attributes']['id'] = 'job-node-form-wrapper';

    //$form['field_customer']['und']['#ajax'] = array('wrapper' => 'job-node-form-wrapper', 'callback' => 'refresh_price_full_callback');
    //$form['field_sender_branch']['und']['#ajax'] = array('wrapper' => 'job-node-form-wrapper', 'callback' => 'refresh_price_full_callback');
    //$form['field_receiver_branch']['und']['#ajax'] = array('wrapper' => 'job-node-form-wrapper', 'callback' => 'refresh_price_full_callback');

    //$form['field_include_pickup_fee']['und']['#ajax'] = array('wrapper' => 'job-node-form-wrapper', 'callback' => 'refresh_price_full_callback');
    //$form['field_include_delivery_fee']['und']['#ajax'] = array('wrapper' => 'job-node-form-wrapper', 'callback' => 'refresh_price_full_callback');

    //$form['field_handling_fee']['und'][0]['value']['#ajax'] = array('wrapper' => 'job-node-form-wrapper', 'callback' => 'refresh_price_full_callback', 'event' => 'blur', 'method' => 'html');
    //$form['field_hand_unload_fee']['und'][0]['value']['#ajax'] = array('wrapper' => 'job-node-form-wrapper', 'callback' => 'refresh_price_full_callback', 'event' => 'blur', 'method' => 'html');

    $form['refresh_calculate'] = array('#type' => 'submit', '#value' => 'Calculate', '#prefix' => '<div class="calculate-cost">', '#suffix' => '</div>');
    $form['refresh_calculate']['#executes_submit_callback'] = FALSE;
    $form['refresh_calculate']['#limit_validation_errors'] = array();
    $form['refresh_calculate']['#ajax'] = array('wrapper' => 'item-list', 'callback' => 'refresh_calculate_callback');

    foreach($form['field_items']['und'] as $key => $value) {

    	if(!is_numeric($key)) continue;

      if(isset($form['field_items']['und'][$key]['field_dg_details'])) {
        $form['field_items']['und'][$key]['field_dg_details']['#prefix'] =  theme('display_modal_header', array('id' => 'dg'.$key, 'title' => 'DG Details'));
		    $form['field_items']['und'][$key]['field_dg_details']['#suffix'] =  theme('display_modal_footer');
		}

        $field_colleciton_items = $job->field_items['und'][$key]['value'];
        $field_colleciton_items_value = field_collection_item_load($field_colleciton_items);
        $field_colleciton_dg_id = $field_colleciton_items_value->field_dg_details['und'][0]['value'];
        $field_colleciton_dg_value = field_collection_item_load($field_colleciton_dg_id);
        $form['field_items']['und'][$key]['field_dg_details']['und'][0]['field_dg']['und']['#title'] = 'DG Details';

	 	$fc = array();
      $field_colleciton_item_id = $form['field_items']['und'][$key]['field_item_details']['und'][0]['#entity']->hostEntity()->item_id;
        if(isset($field_colleciton_item_id)) {
	 	  $fc = field_collection_item_load($field_colleciton_item_id);
	 	}

	 	if(!empty($fc)) {
	 	  $form['field_items']['und'][$key]['field_qty']['und'][0]['value']['#type']= 'value';
		  $form['field_items']['und'][$key]['field_qty']['und'][0]['#suffix'] = $form['field_items']['und'][$key]['field_qty']['und'][0]['value']['#default_value'];
        $form['field_items']['und'][$key]['field_item_details']['#prefix'] =  theme('display_modal_header', array('id' => 'id'.$key, 'title' => 'Item Details'));
		  $form['field_items']['und'][$key]['field_item_details']['#suffix'] =  theme('display_modal_footer');
		}
		else {
		  $form['field_items']['und'][$key]['field_item_details']['#prefix'] = '<div style="display:none;">';
	     $form['field_items']['und'][$key]['field_item_details']['#suffix'] = '</div>';
		}

    	// if(isset($form['field_items']['und'][$key]['field_qty'])) {
      //   $form['field_items']['und'][$key]['field_qty']['und'][0]['value']['#ajax'] = array('wrapper' => 'job-node-form-wrapper', 'callback' => 'refresh_price_full_callback', 'event' => 'blur', 'method' => 'html');
      // }
      //
    	// if(isset($form['field_items']['und'][$key]['field_weight'])) {
      //   $form['field_items']['und'][$key]['field_weight']['und'][0]['value']['#ajax'] = array('wrapper' => 'job-node-form-wrapper', 'callback' => 'refresh_price_full_callback', 'event' => 'blur', 'method' => 'html');
      // }
      //
    	// if(isset($form['field_items']['und'][$key]['field_plt_spc'])) {
      //   $form['field_items']['und'][$key]['field_plt_spc']['und'][0]['value']['#ajax'] = array('wrapper' => 'job-node-form-wrapper', 'callback' => 'refresh_price_full_callback', 'event' => 'blur', 'method' => 'html');
      // }
      //
      // if(isset($form['field_items']['und'][$key]['field_item_type'])) {
      //   $form['field_items']['und'][$key]['field_item_type']['und']['#ajax'] = array('wrapper' => 'job-node-form-wrapper', 'callback' => 'refresh_price_full_callback');
      // }

       if(isset($form['field_items']['und'][$key]['field_dg_details']['und'][0]['field_dg'])) {
        //$form['field_items']['und'][$key]['field_dg_details']['und'][0]['field_dg']['und']['#ajax'] = array('wrapper' => 'job-node-form-wrapper', 'callback' => 'refresh_dg_full_callback');
      }

      $item_details_count = 0;
      foreach($form['field_items']['und'][$key]['field_item_details']['und'] as $key_1 => $val_1) {
      	  if(!is_numeric($key_1)) continue;
          $form['field_items']['und'][$key]['field_item_details']['und'][$key_1]['field_item_no']['und'][0]['value']['#attributes']['disabled'] = 'disabled';
        if($form['field_items']['und'][$key]['field_item_details']['und'][$key_1]['field_item_no']['und'][0]['value']['#default_value'] == '') {
           $n = variable_get('item_no_'.$job_id);
           $n = $n + 1;
			 $connote = 'Item-'.$job_id.'-'.$n;
			 $form['field_items']['und'][$key]['field_item_details']['und'][$key_1]['field_item_no']['und'][0]['value']['#default_value'] = $connote;
           variable_set('item_no_'.$job_id, $n);
        }
        $item_details_count++;
      }
      if($form['field_items']['und'][$key]['field_qty']['und'][0]['value']['#default_value'] != '') {
           $form['field_items']['und'][$key]['field_qty']['und'][0]['value']['#default_value'] = $item_details_count;
      }
    }

    $form['actions']['save-close-button'] = array(
      '#type' => 'submit',
      '#value' => 'Save & Close',
      '#submit' => array('node_form_submit'),
      '#weight' => 7,
    );
    $form['actions']['save-new-button'] = array(
      '#type' => 'submit',
      '#value' => 'Save & New',
      '#submit' => array('node_form_submit'),
      '#weight' => 7,
    );
    $form['total_breakup_markup'] = array('#type' => 'markup', '#markup' => '', '#prefix' => '<div class="total-breakup-markup">', '#suffix' => '</div>');
    $form['#validate'][] = 'job_node_form_validate';

    if(isset($form_state['triggering_element']['#value']) && $form_state['triggering_element']['#value'] == 'Calculate') {
      calculate_all_price($form, $form_state);
    }
  }

  if($form_id == 'pricing_node_form') {
    $form['#attributes']['autocomplete'] = 'off';
        $form['#validate'][] = 'pricing_form_validation';

     //introducing the Update all price by button. This is just a normal markup, as the pdate happens through jQuery, not at the drupal form level
  	 $form['update_all_price'] = array('#type' => 'markup', '#markup' => '<div class="update-all-price-wrap">
	  <span class="update-all-price-value-wrapper">
	    <input type="text" name="update-all-price-value" size="60" class="update-all-price-value form-text">
	  </span>
	  <span class="update-all-price-button">Update All Price by (%)</span>
	</div>');


    //loop through the pricing details items
    foreach ($form['field_pricing_details']['und'] as $key => $value) {
    	//skip if non numeric key, which means these are not the actual subitems and are merely array properties
    	if(!is_numeric($key)) continue;

      //attach add ore valudation and modal wrapper to price by weight fields
      if(isset($form['field_pricing_details'][LANGUAGE_NONE][$key]['field_price_by_weight'])) {
      	  $form['field_pricing_details'][LANGUAGE_NONE][$key]['field_price_by_weight'][LANGUAGE_NONE]['add_more']['#element_validate'][] = 'individual_pricing_validate_weight';
        $form['field_pricing_details'][LANGUAGE_NONE][$key]['field_price_by_weight']['#prefix'] =  theme('display_modal_header', array('id' => 'pwm'.$key, 'title' => 'Add Price by Weight'));
		  $form['field_pricing_details'][LANGUAGE_NONE][$key]['field_price_by_weight']['#suffix'] =  theme('display_modal_footer');
		}

		if(isset($form['field_pricing_details']['und'][$key]['field_price_by_pl_spc'])) {
		  $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und']['add_more']['#element_validate'][] = 'individual_pricing_validate_pl_spc';
        $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['#prefix'] =  theme('display_modal_header', array('id' => 'ppm'.$key, 'title' => 'Add Price by Pl Spc'));
		  $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['#suffix'] =  theme('display_modal_footer');
		}

		//price by weight field operations
		if(isset($form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][0]['field_from_range'])) {
		  $form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][0]['field_from_range']['und'][0]['value']['#type'] = 'value';
        $form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][0]['field_from_range']['und'][0]['value']['#value'] = 0;
        $form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][0]['field_from_range']['und'][0]['value']['#suffix'] =  "0 kg";

        $tot_key = 0;
        foreach($form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'] as $key1 => $value){
          if(!is_numeric($key1)) continue;
          $tot_key++;
        }

        foreach($form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'] as $key1 => $value) {
         //skip if non numeric key, which means these are not the actual subitems and are merely array properties
        	if(!is_numeric($key1)) continue;

          if(isset($form['field_pricing_details'][LANGUAGE_NONE][$key]['field_price_by_weight'][LANGUAGE_NONE][$key1]['field_to_range'])) {
            if($key1 > 0){
              $form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][$key1+1]['field_from_range']['und'][0]['value']['#default_value'] = $form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][$key1]['field_to_range']['und'][0]['value']['#default_value'] + 1;
              $form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][$key1+1]['field_from_range']['und'][0]['value']['#type'] = 'value';
              $form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][$key1+1]['field_from_range']['und'][0]['value']['#suffix'] = $form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][$key1+1]['field_from_range']['und'][0]['value']['#default_value']." kg";
            }
            $form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][1]['field_from_range']['und'][0]['value']['#type'] = 'value';
            $form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][1]['field_from_range']['und'][0]['value']['#default_value'] = $form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][0]['field_to_range']['und'][0]['value']['#default_value'] + 1;
            $form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][1]['field_from_range']['und'][0]['value']['#suffix'] =  $form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][1]['field_from_range']['und'][0]['value']['#default_value']." kg";

            if(($key1 < $tot_key -2) && $tot_key > 1) {
              $form['field_pricing_details']['und'][$key]['field_price_by_weight']['und'][$key1]['field_to_range']['und'][0]['value']['#attributes']['disabled'] = 'disabled';
            }
          }
        }
		}

      	//price by pl spc field operations
		if(isset($form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][0]['field_from_range'])) {
		  $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][0]['field_from_range']['und'][0]['value']['#type'] = 'value';
        $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][0]['field_from_range']['und'][0]['value']['#value'] = 0;
        $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][0]['field_from_range']['und'][0]['value']['#suffix'] =  0;

        $tot_key = 0;
        foreach($form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'] as $key1 => $value){
          if(!is_numeric($key1)) continue;
          $tot_key++;
        }

        foreach($form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'] as $key1 => $value){
        	//skip if non numeric key, which means these are not the actual subitems and are merely array properties
        	if(!is_numeric($key1)) continue;
        	if(isset($form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][$key1]['field_to_range'])) {
            if($key1 > 0){
              $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][$key1+1]['field_from_range']['und'][0]['value']['#default_value'] = $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][$key1]['field_to_range']['und'][0]['value']['#default_value'] + 1;
              $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][$key1+1]['field_from_range']['und'][0]['value']['#type'] = 'value';
              $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][$key1+1]['field_from_range']['und'][0]['value']['#suffix'] = $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][$key1+1]['field_from_range']['und'][0]['value']['#default_value'];
            }

            $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][1]['field_from_range']['und'][0]['value']['#type'] = 'value';
            $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][1]['field_from_range']['und'][0]['value']['#default_value'] = $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][0]['field_to_range']['und'][0]['value']['#default_value'] + 1;
            $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][1]['field_from_range']['und'][0]['value']['#suffix'] =  $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][1]['field_from_range']['und'][0]['value']['#default_value'];

            if(($key1 < $tot_key - 2) && $tot_key > 1) {
              $form['field_pricing_details']['und'][$key]['field_price_by_pl_spc']['und'][$key1]['field_to_range']['und'][0]['value']['#attributes']['disabled'] = 'disabled';
            }
          }
        }
      }
    }
  }

  if($form_id == 'manifest_node_form') {
//      print_r($form['actions']);
      $form['actions']['save-new-button'] = array(
          '#type' => 'submit',
          '#value' => 'Save & New',
          '#submit' => array('node_form_submit'),
          '#weight' => 7,
      );
  }

  if ($form_id == 'search_block_form') {
      $form['actions']['save-new-button'] = array(
          '#type' => 'submit',
          '#value' => 'Save & New',
          '#submit' => array('node_form_submit'),
          '#weight' => 7,
      );
  }
}


//UPDATED BY LEE
function wards_custom_views_query_alter(&$view, &$query) {
    if ($query->where['1']['conditions']['2']['value'][0] == 'None') {
        $db_query = db_select('field_data_field_pricing_plan', 'f');
        $db_query -> fields('f', array('entity_id'));
        $result = $db_query -> execute() -> fetchCol();
        $query->where['1']['conditions']['2']['field'] = 'node.nid';
        $query->where['1']['conditions']['2']['operator'] = 'not in';
        $query->where['1']['conditions']['2']['value'] = $result;
    }
    if ($query->orderby[0]['field'] == 'node_created') {
        $query->orderby[0] = $query->orderby[1];
        unset($query->orderby[1]);
    }

    if ($view->human_name == 'Freight Management Manifest' && count($query->orderby[0]) == 0) {
        $query->orderby[0]['field'] = 'node_title';
        $query->orderby[0]['direction'] = 'ASC';
    }

    dpm(count($query->orderby[0]));
    dpm($view);
}


// function csvImporter_upload_enabled_types_submit($form, &$form_state){

//   $node = node_load($form['nid']['#value']);
//   echo "<pre>";
//   print_r($node->status);
//   die;
//     $msg = $form_state['values']['body'][LANGUAGE_NONE][0]['value'];
//     $tid = $form_state['values']['field_drivers'][LANGUAGE_NONE][0]['tid'];
//     $term = taxonomy_term_load($tid);
//     $phone = $term->field_phone_number[LANGUAGE_NONE][0]['value'];
//   	$message=urlencode($msg);
//     $parameters="username=&api_password=&sender=&to=".$phone."&message=".$message."&priority=11";
//   	$url="http://bulksms.karodial.com/pushsms.php";
//   	$ch = curl_init($url);
//   	$get_url=$url."?".$parameters;
//   	curl_setopt($ch, CURLOPT_POST,0);
//   	curl_setopt($ch, CURLOPT_URL, $get_url);
//   	curl_setopt($ch, CURLOPT_FOLLOWLOCATION,1);
//   	curl_setopt($ch, CURLOPT_HEADER,0);
//   	curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
//   	$return_val = curl_exec($ch);
// }

// function individual_pricing_validate_weight($form, &$form_state) {
//   foreach($form_state['values']['field_pricing_details']['und'] as $k => $v) {
//     if(!is_numeric($k)) continue;

//     foreach($form_state['values']['field_pricing_details']['und'][$k]['field_price_by_weight']['und'] as $k1 => $v1){
//       if(!is_numeric($k1)) continue;
//       if(!isset($form_state['values']['field_pricing_details']['und'][$k]['field_price_by_weight']['und'][$k1]['field_from_range']['und'][0]['value']) || !isset($form_state['values']['field_pricing_details']['und'][$k]['field_price_by_weight']['und'][$k1]['field_to_range']['und'][0]['value'])) continue;

//       $set_from_id = $form_state['values']['field_pricing_details']['und'][$k]['field_price_by_weight']['und'][$k1]['field_from_range']['und'][0]['value'];
//       $set_to_id = $form_state['values']['field_pricing_details']['und'][$k]['field_price_by_weight']['und'][$k1]['field_to_range']['und'][0]['value'];

//       	if($form_state['clicked_button']['#value'] == 'Add another item' && $set_to_id == 0 && $form_state['clicked_button']['#name'] != 'field_pricing_details_add_more') {
//       	  form_set_error('field_pricing_details][und]['.$k.'][field_price_by_weight][und]['.$k1.'][field_to_range', t('To Range Value can\'t be 0 or empty'));
//       }
//       else if($form_state['clicked_button']['#value'] == 'Add another item' && $set_from_id >= $set_to_id && $form_state['clicked_button']['#name'] != 'field_pricing_details_add_more'){
//         form_set_error('field_pricing_details][und]['.$k.'][field_price_by_weight][und]['.$k1.'][field_to_range', t('To Range Value should be greater than From Range Value'));
//       }
//     }
//   }
// }

function individual_pricing_validate_weight($form, &$form_state) {
   // echo"<pre>"; print_r($form_state); die();
  foreach($form_state['values']['field_price_by_weight']['und'] as $k => $v) {
    if(!is_numeric($k)) continue;

      if(!isset($form_state['values']['field_price_by_weight']['und'][$k]['field_from_range']['und'][0]['value']) || !isset($form_state['values']['field_price_by_weight']['und'][$k]['field_to_range']['und'][0]['value'])) continue;

      $set_from_id = $form_state['values']['field_price_by_weight']['und'][$k]['field_from_range']['und'][0]['value'];
      $set_to_id = $form_state['values']['field_price_by_weight']['und'][$k]['field_to_range']['und'][0]['value'];

      	if($form_state['clicked_button']['#value'] == 'Add another item' && $set_to_id == 0 && $form_state['clicked_button']['#name'] == 'field_price_by_weight_add_more') {
      	  form_set_error('field_price_by_weight][und]['.$k.'][field_to_range', t('To Range Value can\'t be 0 or empty'));
      }
      else if($form_state['clicked_button']['#value'] == 'Add another item' && $set_from_id >= $set_to_id && $form_state['clicked_button']['#name'] == 'field_price_by_weight_add_more'){
        form_set_error('field_price_by_weight][und]['.$k.'][field_to_range', t('To Range Value should be greater than From Range Value'));
      }
  }
}

function individual_pricing_validate_pl_spc($form, &$form_state) {

    foreach($form_state['values']['field_price_by_pl_spc']['und'] as $k => $v){
      if(!is_numeric($k)) continue;

      if(!isset($form_state['values']['field_price_by_pl_spc']['und'][$k]['field_from_range']['und'][0]['value']) || !isset($form_state['values']['field_price_by_pl_spc']['und'][$k]['field_to_range']['und'][0]['value'])) continue;

      $set_from_id = $form_state['values']['field_price_by_pl_spc']['und'][$k]['field_from_range']['und'][0]['value'];
      $set_to_id = $form_state['values']['field_price_by_pl_spc']['und'][$k]['field_to_range']['und'][0]['value'];

      if($form_state['clicked_button']['#value'] == 'Add another item' && $set_to_id == 0 && $form_state['clicked_button']['#name'] == 'field_price_by_pl_spc_add_more') {
      	  form_set_error('field_price_by_pl_spc][und]['.$k.'][field_to_range', t('To Range Value can\'t be 0 or empty'));
      }
      else if($form_state['clicked_button']['#value'] == 'Add another item' && $set_from_id >= $set_to_id && $form_state['clicked_button']['#name'] == 'field_price_by_pl_spc_add_more'){
        form_set_error('field_price_by_pl_spc][und]['.$k.'][field_to_range', t('To Range Value should be greater than From Range Value'));
      }
    }
}


// function individual_pricing_validate_pl_spc($form, &$form_state) {
//   foreach($form_state['values']['field_pricing_details']['und'] as $k => $v) {
//     if(!is_numeric($k)) continue;

//     foreach($form_state['values']['field_pricing_details']['und'][$k]['field_price_by_pl_spc']['und'] as $k1 => $v1){
//       if(!is_numeric($k1)) continue;
//       if(!isset($form_state['values']['field_pricing_details']['und'][$k]['field_price_by_pl_spc']['und'][$k1]['field_from_range']['und'][0]['value']) || !isset($form_state['values']['field_pricing_details']['und'][$k]['field_price_by_pl_spc']['und'][$k1]['field_to_range']['und'][0]['value'])) continue;

//       $set_from_id = $form_state['values']['field_pricing_details']['und'][$k]['field_price_by_pl_spc']['und'][$k1]['field_from_range']['und'][0]['value'];
//       $set_to_id = $form_state['values']['field_pricing_details']['und'][$k]['field_price_by_pl_spc']['und'][$k1]['field_to_range']['und'][0]['value'];

//       if($form_state['clicked_button']['#value'] == 'Add another item' && $set_to_id == 0 && $form_state['clicked_button']['#name'] != 'field_pricing_details_add_more') {
//       	  form_set_error('field_pricing_details][und]['.$k.'][field_price_by_pl_spc][und]['.$k1.'][field_to_range', t('To Range Value can\'t be 0 or empty'));
//       }
//       else if($form_state['clicked_button']['#value'] == 'Add another item' && $set_from_id >= $set_to_id && $form_state['clicked_button']['#name'] != 'field_pricing_details_add_more'){
//         form_set_error('field_pricing_details][und]['.$k.'][field_price_by_pl_spc][und]['.$k1.'][field_to_range', t('To Range Value should be greater than From Range Value'));
//       }
//     }
//   }
// }


function refresh_plan_list_callback(&$form, &$form_state) {
    return array(
        '#type' => 'ajax',
        '#commands' => array(
            ajax_command_replace("#plan-list", drupal_render($form['field_pricing_plan'])),
        ),
    );
}

function refresh_customer_list_callback(&$form, &$form_state) {
    return array(
        '#type' => 'ajax',
        '#commands' => array(
            ajax_command_replace("#customer-list", drupal_render($form['field_customer'])),
            ajax_command_replace("#origin-customer-list", drupal_render($form['field_origin']['und'][0]['field_sender_name'])),
            ajax_command_replace("#destination-customer-list", drupal_render($form['field_destination']['und'][0]['field_receiver_name'])),
            ajax_command_replace("#origin-state-list", drupal_render($form['field_origin']['und'][0]['field_state'])),
            ajax_command_replace("#destination-state-list", drupal_render($form['field_destination']['und'][0]['field_state']))
        ),
    );
}

function refresh_calculate_callback(&$form, &$form_state) {
    return array(
        '#type' => 'ajax',
        '#commands' => array(
            ajax_command_replace(".field-name-field-items", drupal_render($form['field_items'])),
            ajax_command_replace(".field-name-field-total-price", drupal_render($form['field_total_price'])),
            ajax_command_replace(".total-breakup-markup", drupal_render($form['total_breakup_markup'])),
        ),
    );
}

function customer_create_ajax_callback($form, &$form_state) {
  if (form_get_errors()) {
    return $form;
  }
  else {
  	 $form_id = $form['#form_id'];
    $form = form_get_cache($form_state['input']['form_build_id'], $form_state);
    $form_state['input'] = array();
    $form = form_builder($form_id, $form, $form_state);

  	 $commands[] = ajax_command_replace("#customer-node-form", drupal_render($form));
    $commands[] = array('command' => 'afterAjaxCustomerAdd');
    return array('#type'=>'ajax', '#commands'=>$commands);
  }
  return $form;
}

function refresh_price_full_callback($form, $form_state) {
  return $form;
}

function calculate_all_price(&$form, &$form_state) {
  $type = NULL;
  $customer = NULL;
  $sender = NULL;
  $receiver = NULL;
  $entry = NULL;
  $pl_spc = NULL;
  $weight = NULL;

  $freight_cost = 0;
  $dg_cost = 0;
  $express_fee = 0;

  if(isset($form_state['input']['field_customer']['und'])) {
  	 $customer = $form_state['input']['field_customer']['und'];
  }
  if($form_state['input']['field_collection_charge']['und'][0]['value'] ==1) {
     $cost_charge = $form_state['input']['field_cost']['und'][0]['value'];
  }
  if(isset($form_state['input']['field_sender_branch']['und'])) {
  	 $sender = $form_state['input']['field_sender_branch']['und'];
  }

  if(isset($form_state['input']['field_job_type']['und'])) {
  	 $express_job_type = $form_state['input']['field_job_type']['und'];
  }

  if(isset($form_state['input']['field_receiver_branch']['und'])) {
    $receiver = $form_state['input']['field_receiver_branch']['und'];
  }

$customer_plan = node_load($customer);
if($customer_plan->field_pricing_plan['und'][0]['target_id'] != ''){
  $line_item_amount = 0;
  if(is_array($form_state['input']['field_items']['und'])) {
    foreach($form_state['input']['field_items']['und'] as $key => $value) {
      if(!is_numeric($key)) continue;

  	   if(isset($form_state['input']['field_items']['und'][$key]['field_plt_spc']['und'][0]['value'])) {
  	     $pl_spc = $form_state['input']['field_items']['und'][$key]['field_plt_spc']['und'][0]['value'];
  	   }
  	   if(isset($form_state['input']['field_items']['und'][$key]['field_weight']['und'][0]['value'])) {
  	     $weight = $form_state['input']['field_items']['und'][$key]['field_weight']['und'][0]['value'];
  	   }

  	   if(isset($form_state['values']['field_items']['und'][$key]['field_qty']['und'][0]['value'])) {
  	     $qty = $form_state['values']['field_items']['und'][$key]['field_qty']['und'][0]['value'];
  	   }
  	   else if(isset($form_state['input']['field_items']['und'][$key]['field_qty']['und'][0]['value'])) {
  	     $qty = $form_state['input']['field_items']['und'][$key]['field_qty']['und'][0]['value'];
  	   } else if(isset($form['field_items']['und'][$key]['field_qty']['und'][0]['value']['#default_value'])){
         $qty = $form['field_items']['und'][$key]['field_qty']['und'][0]['value']['#default_value'];
       }
  	   else $qty = 1;

  	   if(isset($form_state['input']['field_items']['und'][$key]['field_item_type']['und'])) {
  	     $item_type = $form_state['input']['field_items']['und'][$key]['field_item_type']['und'];
  	   }

  	   if(isset($form_state['input']['field_items']['und'][$key]['field_dg_details']['und'][0]['field_dg'])){
         $dg = $form_state['input']['field_items']['und'][$key]['field_dg_details']['und'][0]['field_dg']['und'];
  	   }

      if($pl_spc != NULL) {
       $type = 'pl_spc';
       $entry = $pl_spc;
      }
      else if($weight != NULL) {
   	 	  $type = 'weight';
   	 	  $entry = $weight;
   	   }

  	   if($pl_spc != NULL && $customer != NULL && $item_type != NULL && $sender != NULL && $receiver != NULL && $entry != NULL) {
        $type_pl = 'pl_spc';
  	 	  $cost_tool_pl = calculate_line_item_pricing($type_pl, $customer, $item_type, $sender, $receiver, $entry);
        $cost_tool_pl = $qty * $cost_tool_pl * $entry;
        $form['field_items']['und'][$key]['field_plt_spc']['und'][0]['value']['#suffix'] = $cost_tool_pl;
      }

  	   if($weight != NULL && $customer != NULL && $item_type != NULL && $sender != NULL && $receiver != NULL && $entry != NULL) {
        $type_wt = 'weight';
  	 	  $cost_tool_wt = calculate_line_item_pricing($type_wt, $customer, $item_type, $sender, $receiver, $entry);
        $cost_tool_wt = $qty * $cost_tool_wt;
        $form['field_items']['und'][$key]['field_weight']['und'][0]['value']['#suffix'] = $cost_tool_wt;
      }


      if($type != NULL && $customer != NULL && $item_type != NULL && $sender != NULL && $receiver != NULL && $entry != NULL) {
       $cost = calculate_line_item_pricing($type, $customer, $item_type, $sender, $receiver, $entry);
       if($type == 'pl_spc'){
         $cost = $qty * $cost * $entry;
       }
       else{
         $cost = $qty * $cost;
       }
       $freight_cost = $freight_cost + $cost;
       if($dg == 1) {
         $cost = $cost + (25 / 100 * $cost);
         $dg_cost = $dg_cost + (25 / 100 * $cost);
       }

      if($express_job_type == 47){
          $cost = $cost + (50 / 100 * $cost);
          $express_fee = $express_fee + (50 / 100 * $cost);
      }

       $line_item_amount = $line_item_amount + $cost;
       $form['field_items']['und'][$key]['field_cost']['und'][0]['value']['#value'] = round($cost, 2);
     }
    }
}

  $customer_details = node_load($customer);
  $plan = node_load($customer_details->field_pricing_plan['und'][0]['target_id']);

  $discount = !empty($plan->field_discount['und']) ? $plan->field_discount['und'][0]['value'] : 0;
  $discount_amount = ($discount / 100) * $line_item_amount;
  $line_item_amount = $line_item_amount - $discount_amount;

  $fuel_levy = !empty($plan->field_fuel_levy['und']) ? $plan->field_fuel_levy['und'][0]['value'] : 0;
  $fuel_levy_fee = ($fuel_levy / 100) * $line_item_amount;
  $line_item_amount = $line_item_amount + $fuel_levy_fee;

  $field_handling_fee = isset($form_state['input']['field_handling_fee']['und'][0]['value']) ? $form_state['input']['field_handling_fee']['und'][0]['value'] : 0;
  $field_hand_unload_fee = isset($form_state['input']['field_hand_unload_fee']['und'][0]['value']) ? $form_state['input']['field_hand_unload_fee']['und'][0]['value'] : 0;

  $include_pickup = $form_state['input']['field_include_pickup_fee']['und'][0]['value'];
  $include_delivery = $form_state['input']['field_include_delivery_fee']['und'][0]['value'];

  $pickup_fee = 0;
  if($include_pickup) {
    $pickup_fee = !empty($plan->field_pickup_fee['und']) ? $plan->field_pickup_fee['und'][0]['value'] : 0;
    $line_item_amount = $line_item_amount + $pickup_fee;
  }

  $delivery_fee = 0;
  if($include_delivery) {
    $delivery_fee = !empty($plan->field_delivery_fee['und']) ? $plan->field_delivery_fee['und'][0]['value'] : 0;
    $line_item_amount = $line_item_amount + $delivery_fee;
  }

  if($line_item_amount != 0 || $line_item_amount != ''){
      $con_fee = !empty($plan->field_con_fee['und']) ? $plan->field_con_fee['und'][0]['value'] : 0;
      $line_item_amount = $line_item_amount + $con_fee;
  }

  $line_item_amount = $line_item_amount + $field_handling_fee + $field_hand_unload_fee;

      if($form_state['input']['field_collection_charge']['und'][0]['value'] ==1) {
     $line_item_amount = $line_item_amount + $form_state['input']['field_cost']['und'][0]['value'];
     $third_party_cost = $form_state['input']['field_cost']['und'][0]['value'];
  }

  $form['field_total_price']['und'][0]['value']['#value'] = round($line_item_amount, 2);

  $form['field_total_price']['und'][0]['value']['#value'] = round($line_item_amount, 2);
}

  $total_breakup_markup = '<table class="table table-striped table-bordered">';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Freight Cost</td><td>'.round($freight_cost, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>DG Fee</td><td>'.round($dg_cost, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Express Fee</td><td>'.round($express_fee, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Discount</td><td>'.round($discount_amount, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Fuel Levy</td><td>'.round($fuel_levy_fee, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Handling Fee</td><td>'.round($field_handling_fee, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Hand Unload Fee</td><td>'.round($field_hand_unload_fee, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Pickup Fee</td><td>'.round($pickup_fee, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Delivery Fee</td><td>'.round($delivery_fee, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Con Fee</td><td>'.round($con_fee, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Third Party Charge</td><td>'.round($third_party_cost, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '</table>';

  $form['total_breakup_markup'] = array('#type' => 'markup', '#markup' => $total_breakup_markup, '#prefix' => '<div class="total-breakup-markup">', '#suffix' => '</div>');
}

function calculate_all_price_default(&$form, &$form_state) {
  $type = NULL;
  $customer = NULL;
  $sender = NULL;
  $receiver = NULL;
  $entry = NULL;
  $pl_spc = NULL;
  $weight = NULL;

  $freight_cost = 0;
  $dg_cost = 0;
  $express_fee = 0;

  $node = node_load($form['nid']['#value']);
  if(isset($node->field_customer['und'][0]['target_id'])){
    $customer = $node->field_customer['und'][0]['target_id'];
  }
  if(isset($node->field_sender_branch['und'][0]['target_id'])){
  	$sender = $node->field_sender_branch['und'][0]['target_id'];
  }
  if(isset($node->field_receiver_branch['und'][0]['target_id'])){
    $receiver = $node->field_receiver_branch['und'][0]['target_id'];
  }

  if(isset($node->field_job_type['und'][0]['target_id'])) {
  	 $express_job_type = $node->field_job_type['und'][0]['target_id'];
  }

  $line_item_amount = 0;
  if(is_array($node->field_items['und'])) {
    foreach($node->field_items['und'] as $key => $value) {

       $field_colleciton_items = $node->field_items['und'][$key]['value'];
       $fc = field_collection_item_load($field_colleciton_items);

  	   if(isset($fc->field_plt_spc['und'][0]['value'])) {
  	     $pl_spc = $fc->field_plt_spc['und'][0]['value'];
  	   }
  	   if(isset($fc->field_weight['und'][0]['value'])) {
  	     $weight = $fc->field_weight['und'][0]['value'];
  	   }

  	   if(isset($fc->field_qty['und'][0]['value'])) {
  	     $qty = $fc->field_qty['und'][0]['value'];
  	   }
  	   else { $qty = 1; }

  	   if(isset($fc->field_item_type['und'][0]['target_id'])) {
  	     $item_type = $fc->field_item_type['und'][0]['target_id'];
  	   }

      $dg = 0;
      if(!empty($fc->field_dg_details['und'])) {
        $dg_details = field_collection_item_load($fc->field_dg_details['und'][0]['value']);
        $dg = $dg_details->field_dg['und'][0]['value'];
      }

       if($weight != NULL) {
        $type_weight = 'weight';
        $entry = $weight;
       }

       if($type_weight != NULL && $customer != NULL && $item_type != NULL && $sender != NULL && $receiver != NULL && $entry != NULL) {
        $type = 'weight';
        $cost = calculate_line_item_pricing($type, $customer, $item_type, $sender, $receiver, $entry);
        $cost = $qty * $cost;
        $form['field_items']['und'][$key]['field_weight']['und'][0]['value']['#suffix'] = $cost;
      }

  	   if($pl_spc != NULL) {
  	 	  $type_pl = 'pl_spc';
  	 	  $entry = $pl_spc;
  	   }

  	   if($type_pl != NULL && $customer != NULL && $item_type != NULL && $sender != NULL && $receiver != NULL && $entry != NULL) {
        $type = 'pl_spc';
  	 	  $cost = calculate_line_item_pricing($type, $customer, $item_type, $sender, $receiver, $entry);
        $cost = $qty * $cost;
        $form['field_items']['und'][$key]['field_plt_spc']['und'][0]['value']['#suffix'] = $cost;
      }

      if($pl_spc != NULL) {
       $type = 'pl_spc';
       $entry = $pl_spc;
      }
      else if($weight != NULL) {
   	 	  $type = 'weight';
   	 	  $entry = $weight;
   	   }

      if($type != NULL && $customer != NULL && $item_type != NULL && $sender != NULL && $receiver != NULL && $entry != NULL) {
       $cost = calculate_line_item_pricing($type, $customer, $item_type, $sender, $receiver, $entry);
       $cost = $qty * $cost;

       $freight_cost = $freight_cost + $cost;

       if($dg == 1) {
         $cost = $cost + (25 / 100 * $cost);
         $dg_cost = $dg_cost + (25 / 100 * $cost);
       }

       if($express_job_type == 47){
          $cost = $cost + (50 / 100 * $cost);
          $express_fee = $express_fee + (50 / 100 * $cost);
       }

       $line_item_amount = $line_item_amount + $cost;
       $form['field_items']['und'][$key]['field_cost']['und'][0]['value']['#value'] = round($cost, 2);
     }
    }
  }

  $customer_details = node_load($customer);
  $plan = node_load($customer_details->field_pricing_plan['und'][0]['target_id']);

  $discount = !empty($plan->field_discount['und']) ? $plan->field_discount['und'][0]['value'] : 0;
  $discount_amount = ($discount / 100) * $line_item_amount;
  $line_item_amount = $line_item_amount - $discount_amount;

  $fuel_levy = !empty($plan->field_fuel_levy['und']) ? $plan->field_fuel_levy['und'][0]['value'] : 0;
  $fuel_levy_fee = ($fuel_levy / 100) * $line_item_amount;
  $line_item_amount = $line_item_amount + $fuel_levy_fee;

  $field_handling_fee = !empty($node->field_handling_fee['und']) ? $node->field_handling_fee['und'][0]['value'] : 0;
  $field_hand_unload_fee = isset($node->field_hand_unload_fee['und']) ? $node->field_hand_unload_fee['und'][0]['value'] : 0;

  $include_pickup = !empty($node->field_include_pickup_fee['und']) ? $node->field_include_pickup_fee['und'][0]['value'] : 0;
  $include_delivery = !empty($node->field_include_delivery_fee['und']) ? $node->field_include_delivery_fee['und'][0]['value'] : 0;

  $pickup_fee = 0;
  if($include_pickup) {
    $pickup_fee = !empty($plan->	field_pickup_fee['und']) ? $plan->field_pickup_fee['und'][0]['value'] : 0;
    $line_item_amount = $line_item_amount + $pickup_fee;
  }

  $delivery_fee = 0;
  if($include_delivery) {
    $delivery_fee = !empty($plan->field_delivery_fee['und']) ? $plan->field_delivery_fee['und'][0]['value'] : 0;
    $line_item_amount = $line_item_amount + $delivery_fee;
  }

  $con_fee = !empty($plan->field_con_fee['und']) ? $plan->field_con_fee['und'][0]['value'] : 0;
  $line_item_amount = $line_item_amount + $con_fee;

  $line_item_amount = $line_item_amount + $field_handling_fee + $field_hand_unload_fee;

  $form['field_total_price']['und'][0]['value']['#value'] = round($line_item_amount, 2);

  $total_breakup_markup = '<table>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Freight Cost</td><td>'.round($freight_cost, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>DG Fee</td><td>'.round($dg_cost, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Express Fee</td><td>'.round($express_fee, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Discount</td><td>-'.round($discount_amount, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Fuel Levy</td><td>'.round($fuel_levy_fee, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Handling Fee</td><td>'.round($field_handling_fee, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Hand Unload Fee</td><td>'.round($field_hand_unload_fee, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Pickup Fee</td><td>'.round($pickup_fee, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Delivery Fee</td><td>'.round($delivery_fee, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '<tr><td>Con Fee</td><td>'.round($con_fee, 2).'</td></tr>';
  $total_breakup_markup = $total_breakup_markup . '</table>';

}

/*function calculate_all_price_default(&$form, &$form_state) {
  $node = node_load($form['nid']['#value']);
   if(isset($node->field_customer['und'][0]['target_id'])){
    $customer = $node->field_customer['und'][0]['target_id'];
   }
  if(isset($node->field_sender_branch['und'][0]['target_id'])){
  	$sender = $node->field_sender_branch['und'][0]['target_id'];
  }

  if(isset($node->field_receiver_branch['und'][0]['target_id'])){
    $receiver = $node->field_receiver_branch['und'][0]['target_id'];
  }
  dpm($node->field_items['und']);

  if(is_array($node->field_items['und'])) {
    foreach($node->field_items['und'] as $key => $value) {
       if(!is_numeric($key)) continue;

       $field_colleciton_items = $node->field_items['und'][$key]['value'];
       $fc = field_collection_item_load($field_colleciton_items);

  	   if(isset($fc->field_plt_spc['und'][0]['value'])) {
  	     $pl_spc = $fc->field_plt_spc['und'][0]['value'];
  	   }
  	   if(isset($fc->field_weight['und'][0]['value'])) {
  	     $weight = $fc->field_weight['und'][0]['value'];
  	   }

  	   if(isset($fc->field_qty['und'][0]['value'])) {
  	     $qty = $fc->field_qty['und'][0]['value'];
  	   }
  	   else { $qty = 1; }

  	   if(isset($fc->field_item_type['und'][0]['target_id'])) {
  	     $item_type = $fc->field_item_type['und'][0]['target_id'];
  	   }
      dpm('PL SPC: '.$pl_spc);
      dpm('Weight: '.$weight);
      dpm('QTY: '.$qty);
      dpm('Item Type: '.$item_type);

      $dg = 0;
      if(!empty($fc->field_dg_details['und'])) {
        $dg_details = field_collection_item_load($fc->field_dg_details['und'][0]['value']);
        $dg = $dg_details->field_dg['und'][0]['value'];
      }
      dpm('DG: : '.$dg);
      dpm('=======================================');
  	   if($pl_spc != NULL) {
  	 	  $type_pl = 'pl_spc';
  	 	  $entry = $pl_spc;
  	   }

  	   if($type_pl != NULL && $customer != NULL && $item_type != NULL && $sender != NULL && $receiver != NULL && $entry != NULL) {
        $type = 'pl_spc';
  	 	  $cost = calculate_line_item_pricing($type, $customer, $item_type, $sender, $receiver, $entry);
        $cost = $qty * $cost;
        $form['field_items']['und'][$key]['field_plt_spc']['und'][0]['value']['#suffix'] = $cost;
        if($dg == 1) {
          $cost = $cost + (25 / 100 * $cost);
        }
        $line_item_amount = $line_item_amount + $cost;
        $form['field_items']['und'][$key]['field_cost']['und'][0]['value']['#value'] = $cost;
       }

      if($weight != NULL) {
       $type_weight = 'weight';
       $entry = $weight;
      }

      if($type_weight != NULL && $customer != NULL && $item_type != NULL && $sender != NULL && $receiver != NULL && $entry != NULL) {
        $type = 'weight';
       $cost = calculate_line_item_pricing($type, $customer, $item_type, $sender, $receiver, $entry);
       $cost = $qty * $cost;
        $form['field_items']['und'][$key]['field_weight']['und'][0]['value']['#suffix'] = $cost;
        if($dg == 1) {
          $cost = $cost + (25 / 100 * $cost);
        }
        $line_item_amount = $line_item_amount + $cost;
        $form['field_items']['und'][$key]['field_cost']['und'][0]['value']['#value'] = $cost;
      }
      //  if($pl_spc != NULL) {
      //   $type = 'pl_spc';
      //   $entry = $pl_spc;
      //  }
      //  else if($weight != NULL) {
      //    $type = 'weight';
      //    $entry = $weight;
      //   }
      //
      //  if($type != NULL && $customer != NULL && $item_type != NULL && $sender != NULL && $receiver != NULL && $entry != NULL) {
      //   $cost = calculate_line_item_pricing($type, $customer, $item_type, $sender, $receiver, $entry);
      //   $cost = $qty * $cost;
      //
      //   if($dg == 1) {
      //     $cost = $cost + (25 / 100 * $cost);
      //   }
      //
      //   $line_item_amount = $line_item_amount + $cost;
      //   $form['field_items']['und'][$key]['field_cost']['und'][0]['value']['#value'] = $cost;
      // }
    }
  }
}*/


function calculate_line_item_pricing($type, $customer_id, $item_type, $sender, $receiver, $entry) {
  $customer = node_load($customer_id);
  $plan = node_load($customer->field_pricing_plan['und'][0]['target_id']);
  $items = $plan->field_pricing_details['und'];
  foreach($items as $item) {
    $item_detail = field_collection_item_load($item['value']);
    $Item_type_data = $item_detail->field_item_type['und'][0]['target_id'];
    $sender_data = $item_detail->field_sender_branch['und'][0]['target_id'];
    $receiver_data = $item_detail->field_receiver_branch['und'][0]['target_id'];
    $reversed = $item_detail->field_apply_reversed_price['und'][0]['value'];

    if($Item_type_data == $item_type && (($sender_data == $sender && $receiver_data == $receiver) || ($reversed == 1 && $sender_data == $receiver && $receiver_data == $sender))) {
      if($type == 'weight') {
        $pricing_details = $item_detail->field_price_by_weight['und'];
      }
      else if($type == 'pl_spc') {
        $pricing_details = $item_detail->field_price_by_pl_spc['und'];
      }

      foreach($pricing_details as $pricing_detail) {
        $pricing_detail_item = field_collection_item_load($pricing_detail['value']);
        //assigned an arbitary long value as max limit for the last entry
        $to = !empty($pricing_detail_item->field_to_range) ? $pricing_detail_item->field_to_range['und'][0]['value'] : 1000000000;
        $from = $pricing_detail_item->field_from_range['und'][0]['value'];

        if($entry > $from -1 && $entry < $to + 1) {
          return $pricing_detail_item->field_cost['und'][0]['value'];
        }
      }
    }
  }
  return 0;
}

function wards_custom_node_presave($node) {
  switch ($node->type) {
    case 'job':
      if($node->is_new){
        $value = variable_get('job_no', 0);

        $incremented_no = str_pad($value + 1, 5, 0, STR_PAD_LEFT);
        $incremented_connote_no = 'WT-'.$incremented_no;
        $node->field_connote_no[LANGUAGE_NONE][0]['value'] = $incremented_connote_no;

        variable_set('job_no', $incremented_no);

        $incremented_job_no = $value+1;
        $node->field_job_no[LANGUAGE_NONE][0]['value'] = $incremented_job_no;
      }
      else {
            $node->status = 1;
      }
    break;
     case 'manifest':
      //   echo"<pre>"; print_r($node); die();
        if($node->is_new){
            $node->status = 0;
        }
        else{
            $node->status = 1;
        }
        break;
  }
}

function wards_custom_node_update($node) {
      if(is_object($node) &&  $node->type == 'manifest' && $node->original->status == 0){
         // echo"<pre>"; print_r($node); die();
        $node->status = 1;

        field_attach_update('node', $node);
        entity_get_controller('node')->resetCache(array($node->nid));
     }
     if(is_object($node) &&  $node->type == 'job' && $node->original->field_current_branch[LANGUAGE_NONE][0]['target_id'] != $node->field_current_branch[LANGUAGE_NONE][0]['target_id']){
       $connot_no = $node->field_connote_no[LANGUAGE_NONE][0]['value'];
       $status_id = taxonomy_term_load($node->field_job_status[LANGUAGE_NONE][0]['target_id']);
       $status = $status_id->name;
       $update_branch = taxonomy_term_load($node->field_current_branch[LANGUAGE_NONE][0]['target_id']);
       $email = $update_branch->field_branch_email['und'][0]['value'];
       $key = 'branch_update_mail';
       $params = array(
         'subject' => 'Branch Update',
         'body' => '<p>Job in your Branch - </p><a href="https://fms.wardsgroup.com.au/?q=node/'.$node->nid.'/edit&locked=true">'.$connot_no.'</a>
                    <p>Job Status - </p>'.$status,
       );
       $from = 'noreply@fms.wardsgroup.com.au';
       $mail = drupal_mail('wards_custom', $key, $email, language_default(), $params, $from);
     }
     if(is_object($node) &&  $node->type == 'job' && $node->original->status == 0){
      $msg = 'Connote No. - '.$node->field_connote_no[LANGUAGE_NONE][0]['value'].'   https://fms.wardsgroup.com.au/?q=job/data/print/pdf&job_id='.$node->nid;
      if(isset($node->field_assigned_driver[LANGUAGE_NONE][0]['target_id'])){
      $tid = $node->field_assigned_driver[LANGUAGE_NONE][0]['target_id'];
      $term = taxonomy_term_load($tid);
      $phone = $term->field_phone_number[LANGUAGE_NONE][0]['value'];
      $message=urlencode($msg);
      $parameters="username=ashley.ward@wardstransport.com.au&api_password=!W@rds2003&sender=&to=".$phone."&message=".$message."&priority=11&from=Wards_TPT";
      $url="https://app.wholesalesms.com.au/api/v2/send-sms.json";
      $ch = curl_init($url);
      $header = array("Content-Type:application/json", "Accept:application/json");
      $get_url=$url."?".$parameters;
      curl_setopt($ch, CURLOPT_POST,0);
      curl_setopt($ch, CURLOPT_URL, $get_url);
      curl_setopt($ch, CURLOPT_FOLLOWLOCATION,1);
         curl_setopt($ch, CURLOPT_HTTPHEADER, array(
         'Authorization: Basic ODViOTdlNDg0OTU4NTU4NzMyOTg1MmVkNTU1OTNkMDE6MTY3MGNmMDJjYjUyODI3NDQ2ZDE3OGZiYTQyM2ZkMWU='
          ));
      curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
      $return_val = curl_exec($ch);
     }
    //  $connot_no = $node->field_connote_no[LANGUAGE_NONE][0]['value'];
    //  $update_branch = taxonomy_term_load($node->field_current_branch[LANGUAGE_NONE][0]['target_id']);
    //  $email = $update_branch->field_branch_email['und'][0]['value'];
    //  $key = 'branch_update_mail';
    //  $params = array(
    //    'subject' => 'Branch Update',
    //    'body' => "<p>Job in your Branch - </p>".$connot_no,
    //  );
    //  $from = 'noreply@fms.wardsgroup.com.au';
    //  $mail = drupal_mail('wards_custom', $key, $email, language_default(), $params, $from);
     }
     if($node->type == 'job' && isset($node->field_job_status[LANGUAGE_NONE][0]['target_id'])){
       if($node->field_job_status[LANGUAGE_NONE][0]['target_id'] == 55){
       $org = $node->original;
       $customer_id = $node->field_customer[LANGUAGE_NONE][0]['target_id'];
       $customer = node_load($customer_id);
       $price_id = $customer->field_pricing_plan[LANGUAGE_NONE][0]['target_id'];
       $price = node_load($price_id);
       $fee = $price->field_futile_pickup_fee[LANGUAGE_NONE][0]['value'];
       if($org->field_job_status[LANGUAGE_NONE][0]['target_id'] != 55 && $node->field_job_status[LANGUAGE_NONE][0]['target_id'] == 55){
         $node->field_total_price[LANGUAGE_NONE][0]['value'] = $node->field_total_price[LANGUAGE_NONE][0]['value'] + $fee;
         field_attach_update('node', $node);
         entity_get_controller('node')->resetCache(array($node->nid));
       }
       }
     }
}

function wards_custom_entity_insert($entity, $type) {
   if($type == 'field_collection_item' && $entity->field_name == 'field_items'){
     if($entity->archived == ""){
   	  $job = $entity->hostEntity();
   	  $job_id = $job->field_job_no['und'][0]['value'];
   	  static $hook_running=false;
      if($hook_running) {
        return;
      } else {
       $hook_runnin=true;
      }
      if(!empty($entity->field_qty['und'])) {

        $quantity = $entity->field_qty['und'][0]['value'];
        $n = variable_get('item_no_'.$job_id, 0);
        for($i =0; $i < $quantity - 1; $i++) {
           $n = $n + 1;
      	    $connote = 'Item-'.$job_id.'-'.$n;
	       $fc_create = entity_create('field_collection_item', array('field_name' => 'field_item_details'));
	       $fc_create->setHostEntity('field_collection_item', $entity);
	       $fc_create->field_item_no['und'][0]['value'] = $connote;
	       $fc_create->save(true);
          $entity->field_item['und'][$i] = array('value' => $fc_create->item_id);
          field_attach_update('field_collection_item', $entity);
          variable_set('item_no_'.$job_id,$n);
        }
     }
   }
   else if($entity->archived == 0){
     $job = $entity->hostEntity();
     $job_id = $job->field_job_no['und'][0]['value'];
       if(!empty($entity->field_qty['und'])) {
         $quantity = $entity->field_qty['und'][0]['value'];
         $n = variable_get('item_no_'.$job_id, 0);
         foreach($entity->field_item_details['und'] as $key => $value){
           $n = $n +1;
           $fc = field_collection_item_load($value);
           for($i =0; $i < $quantity - 1; $i++) {
             $connote = 'Item-'.$job_id.'-'.$n;
             $fc->field_item_no['und'][0]['value'] = $connote;
             field_attach_update('field_collection_item', $fc);
             variable_set('item_no_'.$job_id,$n);
           }
         }
      }
    }
 }
}

function job_node_form_validate($form, &$form_state){
    if($form_state['values']['field_sender_manual_entry']['und'][0]['value'] == 0){
        if($form_state['values']['field_origin']['und'][0]['field_sender_name']['und'][0]['target_id'] == ""){
            form_set_error('field_origin][und][0][field_sender_name', t('Fill Sender Name .'));
        }
        if($form_state['values']['field_origin']['und'][0]['field_address_line_1']['und'][0]['value'] == ""){
            form_set_error('field_origin][und][0][field_address_line_1', t('Fill Sender Address .'));
        }
        if($form_state['values']['field_origin']['und'][0]['field_state']['und'][0]['value'] == ""){
            form_set_error('field_origin][und][0][field_state', t('Fill Sender State .'));
        }
        if($form_state['values']['field_origin']['und'][0]['field_contact_name']['und'][0]['value'] == ""){
            form_set_error('field_origin][und][0][field_contact_name', t('Fill Sender Contact Name .'));
        }
    }
    else if($form_state['values']['field_sender_manual_entry']['und'][0]['value'] == 1){
        if($form_state['values']['field_sender_third_party']['und'][0]['field_sender_manual_name']['und'][0]['value'] == ""){
            form_set_error('field_sender_third_party][und][0][field_sender_manual_name', t('Fill Sender Name .'));
        }
        if($form_state['values']['field_sender_third_party']['und'][0]['field_sender_manual_address1']['und'][0]['value'] == ""){
            form_set_error('field_sender_third_party][und][0][field_sender_manual_address1', t('Fill Sender Address .'));
        }
        if($form_state['values']['field_sender_third_party']['und'][0]['field_sender_state']['und'][0]['value'] == ""){
            form_set_error('field_sender_third_party][und][0][field_sender_state', t('Fill Sender State .'));
        }
        if($form_state['values']['field_sender_third_party']['und'][0]['field_sender_contact_name']['und'][0]['value'] == ""){
            form_set_error('field_sender_third_party][und][0][field_sender_contact_name', t('Fill Sender Contact Name .'));
        }
    }
    if($form_state['values']['field_receiver_manual_entry']['und'][0]['value'] == 0){
        if($form_state['values']['field_destination']['und'][0]['field_receiver_name']['und'][0]['target_id'] == ""){
            form_set_error('field_destination][und][0][field_receiver_name', t('Fill Receiver Name .'));
        }
        if($form_state['values']['field_destination']['und'][0]['field_address_line_1']['und'][0]['value'] == ""){
            form_set_error('field_destination][und][0][field_address_line_1', t('Fill Receiver Address .'));
        }
        if($form_state['values']['field_destination']['und'][0]['field_state']['und'][0]['value'] == ""){
            form_set_error('field_destination][und][0][field_state', t('Fill Receiver State .'));
        }
        if($form_state['values']['field_destination']['und'][0]['field_contact_name']['und'][0]['value'] == ""){
            form_set_error('field_destination][und][0][field_contact_name', t('Fill Receiver Contact Name .'));
        }
    }
    else if($form_state['values']['field_receiver_manual_entry']['und'][0]['value'] == 1){
        if($form_state['values']['field_receiver_third_party']['und'][0]['field_receiver_manual_name']['und'][0]['value'] == ""){
            form_set_error('field_receiver_third_party][und][0][field_receiver_manual_name', t('Fill Receiver Name .'));
        }
        if($form_state['values']['field_receiver_third_party']['und'][0]['field_receiver_address_line_1']['und'][0]['value'] == ""){
            form_set_error('field_receiver_third_party][und][0][field_receiver_address_line_1', t('Fill Receiver Address .'));
        }
        if($form_state['values']['field_receiver_third_party']['und'][0]['field_receiver_state']['und'][0]['value'] == ""){
            form_set_error('field_receiver_third_party][und][0][field_receiver_state', t('Fill Receiver State .'));
        }
        if($form_state['values']['field_receiver_third_party']['und'][0]['field_receiver_contact_name']['und'][0]['value'] == ""){
            form_set_error('field_receiver_third_party][und][0][field_receiver_contact_name', t('Fill Receiver Contact Name .'));
        }
    }
}

function pricing_form_validation($form, &$form_state){
    //This has been completely rendered useless by the new ajax field collection widget.
    /*$used_ids = array();
    $array1= array();
    foreach($form_state['values']['field_pricing_details']['und'] as $k => $v){
        $fc = field_collection_item_load($v['value']);

        $item_type_id = $fc->field_item_type['und'][0]['target_id'];
        $item_type = taxonomy_term_load($item_type_id)->name;
        $from_id = $fc->field_sender_branch['und'][0]['target_id'];
        $from = taxonomy_term_load($from_id)->name;
        $to_id = $fc->field_receiver_branch['und'][0]['target_id'];
        $to = taxonomy_term_load($to_id)->name;

        $array1 = array('item' => $item_type_id, 'to' =>$to_id , 'from' =>$from_id );
        if($array1['item'] != ''){
            foreach ($used_ids as $item1) {
             if($array1 == $item1) {
              form_set_error('field_pricing_details][und', t('Item Type, Origin and Destination combination needs to be unique for '.$item_type.', '.$from.', '.$to));
             }
            }
        }


        $weight_item_count = 0;
        foreach($form_state['values']['field_pricing_details']['und'][$k]['field_price_by_weight']['und'] as $k1 => $v1){
          if(!is_numeric($k1) || !isset($form_state['values']['field_pricing_details']['und'][$k]['field_price_by_weight']['und'][$k1]['field_to_range'])) continue;
          $weight_item_count = $k1;
        }

        if($form_state['values']['field_pricing_details']['und'][$k]['field_price_by_weight']['und'][$weight_item_count]['field_to_range']['und'][0]['value'] != '') {
          form_set_error('field_pricing_details][und]['.$k.'][field_item_type', t('The To value for the last item of Weight entry has to be blank as it signified unlimited range'));
        }

        $pl_spc_item_count = 0;
        foreach($form_state['values']['field_pricing_details']['und'][$k]['field_price_by_pl_spc']['und'] as $k1 => $v1){
          if(!is_numeric($k1) || !isset($form_state['values']['field_pricing_details']['und'][$k]['field_price_by_pl_spc']['und'][$k1]['field_to_range'])) continue;
          $pl_spc_item_count = $k1;
        }

        if($form_state['values']['field_pricing_details']['und'][$k]['field_price_by_pl_spc']['und'][$pl_spc_item_count]['field_to_range']['und'][0]['value'] != '') {
          form_set_error('field_pricing_details][und]['.$k.'][field_item_type', t('The To value for the last item of PL SPC entry has to be blank as it signified unlimited range'));
        }
        array_push($used_ids,$array1);
    }*/
}

function pricing_form_validate($form, &$form_state){
  $used_ids = array();
  $array1= array();
  $array2 = array();

    $item_type_id = $form_state['values']['field_item_type']['und'][0]['target_id'];
    $from_id = $form_state['values']['field_sender_branch']['und'][0]['target_id'];
    $to_id = $form_state['values']['field_receiver_branch']['und'][0]['target_id'];

    $array1= array('item' => $item_type_id, 'to' =>$to_id , 'from' =>$from_id );

    // if($from_id == $to_id){
    //   form_set_error('field_sender_branch', t('Origin and Destination can\'t same.'));
    // }
    foreach ($used_ids as $item1) {
      if($array1==$item1) {
        form_set_error('field_item_type', t('Item Type, Origin and Destination combination needs to be unique.'));
      }
    }

    $weight_item_count = 0;
    foreach($form_state['values']['field_price_by_weight']['und'] as $k => $v){
      if(!is_numeric($k) || !isset($form_state['values']['field_price_by_weight']['und'][$k]['field_to_range'])) continue;
      $weight_item_count = $k;
    }

    if($form_state['values']['field_price_by_weight']['und'][$weight_item_count]['field_to_range']['und'][0]['value'] != '') {
      form_set_error('field_item_type', t('The To value for the last item of Weight entry has to be blank as it signified unlimited range'));
    }

    $pl_spc_item_count = 0;
    foreach($form_state['values']['field_price_by_pl_spc']['und'] as $k => $v){
      if(!is_numeric($k) || !isset($form_state['values']['field_price_by_pl_spc']['und'][$k]['field_to_range'])) continue;
      $pl_spc_item_count = $k;
    }

    if($form_state['values']['field_price_by_pl_spc']['und'][$pl_spc_item_count]['field_to_range']['und'][0]['value'] != '') {
      form_set_error('field_item_type', t('The To value for the last item of PL SPC entry has to be blank as it signified unlimited range'));
    }
    array_push($used_ids,$array1);
}

function wards_custom_init() {
  if(arg(0) == 'node' && is_numeric(arg(1)) && arg(2)== '') {
    $url = arg(0);
    $url1 = arg(1);
    $url_final = url($_GET['q']);
    drupal_goto('node/'.$url1.'/edit', array('query' => array('locked' => 'true')));
  }
  // if(arg(0) == 'node' && is_numeric(arg(1)) && arg(2)== 'edit' && arg(3) == '') {
  //   global $user;
  //   $url = arg(0);
  //   $url1 = arg(1);
  //   $url_final = url($_GET['q']);
  //   $nid = node_load(arg(1));
  //   if($user->roles[2] == 'authenticated user'&& $user->roles[3] != 'administrator' && $nid->type == "job" && $nid->field_job_status['und'][0]['target_id'] == 239){
  //     drupal_goto('dashboard');
  //   }
  // }
  if(arg(0) == 'node' && is_numeric(arg(1)) && arg(2)== 'edit' && isset($_GET['locked']) && $_GET['locked'] == 'true'){
    drupal_add_js('jQuery(document).ready(function(){
                   jQuery("#job-node-form-wrapper :input").prop("disabled", true);
                   jQuery("#job-node-form-wrapper :button").prop("disabled", false);
                   jQuery("#job-node-form-wrapper #field-make-sender-add-more-wrapper :input").prop("disabled", true);
                   jQuery("#customer-node-form :input").prop("disabled", true);
                   jQuery("#manifest-job-form-wrapper :input").prop("disabled", true);
                   jQuery("#pricing-node-form :input").prop("disabled", true);
                   jQuery("#pricing-node-form :button").prop("disabled", false);
                   });', 'inline');
  }
  else{
    global $user;
    $url = arg(0);
    $url1 = arg(1);
    $url_final = url($_GET['q']);
    $nid = node_load(arg(1));
    if($user->roles[2] == 'authenticated user'&& $user->roles[3] != 'administrator' && $nid->type == "job" && $nid->field_job_status['und'][0]['target_id'] == 239){
      drupal_goto('node/'.$url1.'/edit', array('query' => array('locked' => 'true')));
    }
  }
}

function suburb_ajax(){
  $suburb_id=$_POST["suburb_id"];
  $suburb = taxonomy_term_load($suburb_id);
  $postel_code = $suburb->field_postal_code_[LANGUAGE_NONE][0]['value'];
  $result = array('suburb_id' =>$suburb_id,'postel_code'=>$postel_code);
  drupal_json_output( $result);
  exit();
}

function customer_details_ajax_a(){
    $customer_id=$_POST["customer_id"];

    $customer = node_load($customer_id);
    $primary_contact= $customer->field_primary_contact[LANGUAGE_NONE][0]['value'];
    $primary_address= $customer->field_primary_address[LANGUAGE_NONE][0]['value'];

    $primary_address_fields = field_collection_item_load($primary_address);
    $address1=$primary_address_fields->field_address_line_1[LANGUAGE_NONE][0]['value'];
    $address2=$primary_address_fields->field_address_line_2[LANGUAGE_NONE][0]['value'];
    $suburb_id =$primary_address_fields->field_suburb_[LANGUAGE_NONE][0]['value'];
    $postel_code = $primary_address_fields->field_postal_code_[LANGUAGE_NONE][0]['value'];
    $state=$primary_address_fields->field_state[LANGUAGE_NONE][0]['value'];
    $closing=$primary_address_fields->field_closing[LANGUAGE_NONE][0]['value'];
    if($closing != ''){
    $time = date('h:i a', $closing);
    }
    $primary_contact_fields = field_collection_item_load($primary_contact);
    $contact_name=$primary_contact_fields->field_contact_name [LANGUAGE_NONE][0]['value'];
    $mobile=$primary_contact_fields->field_mobile[LANGUAGE_NONE][0]['value'];

    $result = array('customer_id' =>$customer_id,'address1'=>$address1,'address2'=>$address2,'suburb'=>$suburb_id,'postel_code'=>$postel_code,'state'=>$state,'time'=>$time,'contact_name'=>$contact_name,'mobile'=> $mobile);
    drupal_json_output( $result);
    exit();
}


function scan_update_form($form,&$form_state) {
  $form['#id'] = 'scan-update-form';
  $scan_in_progress = 0;
  if(!empty($form_state['values'])) {
    if($form_state['triggering_element']['#parents'][0] == 'start_scan_button') {
      $scan_in_progress = 1;
    }
    else if ($form_state['triggering_element']['#parents'][0] == 'cancel_scan_button') {
      $scan_in_progress = 0;
    }
    else {
      $scan_in_progress = $form_state['input']['scan_in_progress'];
    }
  }
  $form['scan_in_progress'] = array('#type' => 'hidden', '#value' => $scan_in_progress);
  $status =array('_none'=>'- None -');
  $status_load = taxonomy_get_tree(12);
  foreach ($status_load as  $status_name) {
    $status[$status_name->tid]=$status_name->name;
  }

  $receiver_branch =array('_none'=>'- None -');
  $branch_load = taxonomy_get_tree(8);
  foreach ($branch_load as  $branch_name) {
    $receiver_branch[$branch_name->tid] = $branch_name->name;
  }

 $form['dashboard'] = array(
   '#type' => 'markup',
   '#markup' => '<div></div>
                 <div id="scan-box-close">Close</div>',
 );
 if($scan_in_progress) {
   $form['scan_options_wrapper'] = array(
     '#type' => 'container',
     '#prefix' => '<div id="scan-options-wrapper" style="display: none">',
     '#suffix' => '</div>',
   );
 }
 else {
   $form['scan_options_wrapper'] = array(
     '#type' => 'container',
     '#prefix' => '<div id="scan-options-wrapper">',
     '#suffix' => '</div>',
   );
 }
 $form['scan_options_wrapper']['status'] = array(
   '#title' => t('Status Update'),
   '#type' => 'select',
   '#required' => TRUE,
   '#options'=>$status,
 );
 $form['scan_options_wrapper']['receiver_branch'] = array(
   '#title' => t('Branch'),
   '#type' => 'select',
   '#required' => TRUE,
   '#options'=>$receiver_branch,
 );

 $form['scan_options_wrapper']['start_scan_button'] = array(
   '#type' => 'submit',
   '#value' => t('Scan'),
   '#executes_submit_callback' => FALSE,
   '#ajax' => array(
     'callback' => 'scan_update_ajax_submit',
     'wrapper' => 'scan-update-form',
   ),
 );
 if($scan_in_progress) {
   $form['scan_wrapper'] = array(
     '#type' => 'container',
     '#prefix' => '<div id="scan-wrapper">',
     '#suffix' => '</div>',
   );
 }
 else {
   $form['scan_wrapper'] = array(
     '#type' => 'container',
     '#prefix' => '<div id="scan-wrapper" style="display: none">',
     '#suffix' => '</div>',
   );
 }
  $form['scan_wrapper']['connot'] = array(
    '#title' => t('Connote/Manifest number'),
    '#type' => 'textfield',
    '#prefix' => '<div id="connot-id">',
    '#suffix' => '</div>',
    '#ajax' => array(
    'callback' => 'scan_update_ajax_submit',
    'wrapper' => 'scan-update-form',
    'event' => 'change',
    ),
  );
 $form['scan_wrapper']['cancel_scan_button'] = array(
   '#type' => 'submit',
   '#value' => t('Cancel Scan'),
   '#executes_submit_callback' => FALSE,
   '#limit_validation_errors' => array(),
   '#ajax' => array(
     'callback' => 'scan_update_ajax_submit',
     'wrapper' => 'scan-update-form',
   ),
 );
  $form['scan_wrapper']['nids']= array(
    '#type' => 'hidden',
    '#value' => '',
  );
  if (isset($form_state['values'])) {
    if(!empty($form_state['values']['connot'])) {
      $present_connote = $form_state['values']['connot'];
      $result = db_select('field_data_field_connote_no', 'n')
        ->fields('n')
        ->condition('field_connote_no_value', $form_state['values']['connot'],'=')
        ->execute()
        ->fetchAssoc();
      $node = node_load($result['entity_id']);
      if(is_object($node) && !empty($node)) {
        $existing_jobs = $form_state['values']['nids'];
        if($form_state['values']['nids'] == '') {
          $jobs_array = array();
        }
        else if(strpos($existing_jobs, ',') == false) {
          $jobs_array[] = $existing_jobs;
        }
        else {
          $jobs_array = explode(',', $existing_jobs);
        }
        $jobs_array[] = $node->nid;
        $jobs_array = array_unique($jobs_array);
        $new_jobs = implode(',', $jobs_array);
        $form['scan_wrapper']['nids']['#value'] = trim($new_jobs, ',');
      }
      else {
        $manifest_id = $form_state['values']['connot'];
        $manifest_result = explode("-",$manifest_id);
        if($manifest_result[0] == "M"){
        $node = node_load($manifest_result[1]);
        if(is_object($node) && $node->type == 'manifest') {
          $existing_jobs = $form_state['values']['nids'];
          $jobs_array = explode(',', $existing_jobs);
          foreach( $node->field_avaiable_jobs['und'] as $key => $value){
           $jobs_array[] = $node->field_avaiable_jobs['und'][$key]['target_id'];
          }
          $jobs_array = array_unique($jobs_array);
          $new_jobs = implode(',', $jobs_array);
          $form['scan_wrapper']['nids']['#value'] = trim($new_jobs, ',');
          }
        }
        else {
          $new_jobs = $form_state['input']['nids'];
          $form['scan_wrapper']['nids']['#value'] = trim($new_jobs, ',');
        }
      }
    }
    else {
      $new_jobs = $form_state['input']['nids'];
      $form['scan_wrapper']['nids']['#value'] = trim($new_jobs, ',');
    }

    $list = array();
    $list1 = array();
    $final_jobs = trim($new_jobs, ',') != '' ? explode(',', trim($new_jobs, ',')) : array();

    foreach($final_jobs as  $key => $value){
     $job_load = node_load($value);
     $last_date = $job_load->changed;
     if($job_load->field_job_type[LANGUAGE_NONE][0]['target_id'] == 49) {
     $update_date = strtotime('+1 day', $last_date);
     $created_date = date('d/m/Y', $update_date);
     }
     if($job_load->field_job_type[LANGUAGE_NONE][0]['target_id'] == 47) {
     $update_date = strtotime('+2 day', $last_date);
     $created_date = date('d/m/Y', $update_date);
     }
     if($job_load->field_job_type[LANGUAGE_NONE][0]['target_id'] == 48) {
     $update_date = strtotime('+3 day', $last_date);
     $created_date = date('d/m/Y', $update_date);
     }
       $form['scan_wrapper']['data_wrapper1'.$value] = array(
         '#type' => 'container',
         '#prefix' => '<div id="data-wrapper-table-'.$value.'" class="data-wrapper-table">',
         '#suffix' => '</div>',
       );
       $form['scan_wrapper']['data_wrapper1'.$value]['check_all_'.$value] = array(
         '#type' => 'checkbox',
         '#default_value' => 1,
         '#prefix' => '<div class="check-all-job"><div class="check-all-job-icon"> <i class="glyphicon glyphicon-chevron-down"></i></div>',
         '#suffix' => '<div class="group-top"><span class="group-connote">'.$job_load->field_connote_no[LANGUAGE_NONE][0]['value'].'</span><span class="group-customer">'.node_load($job_load->field_customer[LANGUAGE_NONE][0]['target_id'])->title.'</span><span class="group-current-branch">'.taxonomy_term_load($job_load->field_current_branch['und'][0]['target_id'])->name.'</span><span class="group-current-status">'.taxonomy_term_load($job_load->field_job_status['und'][0]['target_id'])->name.'</span><span class="group-sender-branch">'.taxonomy_term_load($job_load->field_sender_branch['und'][0]['target_id'])->name.'</span><span class="group-reciever-branch">'.taxonomy_term_load($job_load->field_receiver_branch['und'][0]['target_id'])->name.'</span><span class="group-arrival-date">'.$created_date.'</span></div></div>',
       );
       $form['scan_wrapper']['data_wrapper1'.$value]['item_all_'.$value] = array(
         '#prefix' => '<div id="data-wrapper-all-items-'.$value.'" class="data-wrapper-all-items">',
         '#suffix' => '</div>',
        );
      foreach($job_load->field_items['und'] as $key => $value) {
        $fc = field_collection_item_load($value);
        $list[$fc->item_id] = array('Item ID' => $fc->item_id,'itemname' => $fc->field_reference['und'][0]['value']);
          foreach($fc->field_item_details['und'] as $key => $value) {
            $fc1 = field_collection_item_load($value);
            $list1[$fc->item_id][$fc1->item_id] = array('Item ID' => $fc1->item_id,'itemname' =>$fc1->field_item_no['und'][0]['value'], 'description' => $fc1->field_description['und'][0]['value'], 'current branch' => taxonomy_term_load($fc1->field_current_branch['und'][0]['target_id'])->name , 'current status' => taxonomy_term_load($fc1->field_job_status['und'][0]['target_id'])->name);
          }
      }
    }
    $header = array(
     'itemname' => t('Item name'),
     'description' => t('Description'),
     'current branch' => t('Current Branch'),
     'current status' => t('current status'),
    );
   foreach($list as $key => $value){
     $collect = entity_load_single('field_collection_item', $key);
     $fc_load = $collect->hostEntity();
     $form['scan_wrapper']['data_wrapper1'.$fc_load->nid]['item_all_'.$fc_load->nid]['data_wrapper2'.$key] = array(
      '#prefix' => '<div id="data-wrapper-item-'.$key.'" class="data-wrapper-item"><div class="check-all-item-icon"> <i class="glyphicon glyphicon-chevron-down"></i></div>',
       '#suffix' => '</div>',
    );
  }

    foreach($list1 as $key => $value){
      $model = entity_load_single('field_collection_item', $key);
      $node = $model->hostEntity();
      $form['scan_wrapper']['data_wrapper1'.$node->nid]['item_all_'.$node->nid]['data_wrapper2'.$model->item_id]['job_select_check'.$key] = array(
      '#title' => '<div class ="item-group-level"><span class="group-reference col-sm-3">'.$model->field_reference['und'][0]['value'].'</span><span class="group-qty col-sm-3">'.$model->field_qty['und'][0]['value'].'</span><span class="group-item-type col-sm-3">'.taxonomy_term_load($model->field_item_type['und'][0]['target_id'])->name.'</span><span class="group-description col-sm-3">'.$model->field_description['und'][0]['value'].'</span></div>',
      '#type' => 'checkbox',
       '#default_value' => 1,
       '#prefix' => '<div id="data-wrapper-checkbox-'.$key.'" class="data-wrapper-checkbox">',
        '#suffix' => '</div>',
     );
     $form['scan_wrapper']['data_wrapper1'.$node->nid]['item_all_'.$node->nid]['data_wrapper2'.$model->item_id]['job_select'.$key] = array(
       '#type' => 'tableselect',
       '#header' => $header,
       '#options' => $list1[$key],
       '#empty' => t('No jobs Available.'),
       '#prefix' => '<div id="data-wrapper-table-'.$key.'" class="data-wrapper-table">',
        '#suffix' => '</div>',
        '#default_value' =>$list1[$key],
     );
    }
    $form['scan_wrapper']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Update'),
    );
  }
  return $form;
}

function scan_update_ajax_submit(&$form, &$form_state) {
  return $form;
}

function scan_update_form_submit($form,&$form_state) {
  $nids = array_filter(explode(',', $form_state['values']['nids']));
  $number_of_nodes = count($nids);
  $operations = array();
  for ($i = 0; $i <= $number_of_nodes-1; $i++) {
    $operations[] = array('status_submit',array($i));
  }
  $connote_array = array();
  foreach($nids as $value){
   $node = node_load($value);
    foreach($node->field_items['und'] as $key => $value) {
      $final_val = 'job_select'.$value['value'];
      if(isset($form_state['values'][$final_val])){
        foreach($form_state['values'][$final_val] as $key => $value){
          if($value != 0){
            $fc1 = field_collection_item_load($value);
            $wrapper = entity_metadata_wrapper('field_collection_item', $fc1);
          //  echo"<pre>"; print_r($wrapper->field_job_status); die();
            $wrapper->field_job_status->set($form_state['values']['status']);
            $wrapper->field_current_branch->set($form_state['values']['receiver_branch']);
            $wrapper->save();
          }
        }
      }
    }
    $node->field_job_status['und'][0]['target_id'] = $form_state['values']['status'];
    $node->field_current_branch['und'][0]['target_id'] = $form_state['values']['receiver_branch'];
    $connote_array[] = $node->field_connote_no['und'][0]['value'];
    node_save($node);
  }
  $connot_array = implode(", ",$connote_array);
  $taxo_branch = taxonomy_term_load($form_state['values']['receiver_branch']);
  $email = $taxo_branch->field_branch_email['und'][0]['value'];
  $key = 'branch_update_mail';
  $params = array(
    'subject' => 'Branch Update',
    'body' => "<p>Job in your Branch - </p>".$connot_array,
  );
  $from = 'noreply@fms.wardsgroup.com.au';
  $mail = drupal_mail('wards_custom', $key, $email, language_default(), $params, $from);
    drupal_set_message('Update Successfully.');
}

function scan_update_form_finished() {
  drupal_goto('scan/updates');
}

function wards_custom_mail($key, &$message, $params){
 if($key ==  'branch_update_mail')
 {
	 $message['subject'] = $params['subject'];
	 $message['body'][] =  $params['body'];
 }
}

function wards_custom_node_submit($node, $form, &$form_state) {
    if($node->type == "pricing" || $node->type == "customer" || $node->type == "manifest" || $node->type == "job"){
      global $user;
      drupal_set_message('Your changes have been saved');
      if($node->status == 1){
          if($user->roles[2] == 'authenticated user'&& $user->roles[3] != 'administrator' && $user->roles[4] != 'Manager'){
         node_save($node);
         drupal_goto('node/'.$node->nid);
         }
         else if(($user->roles[3] == 'administrator' && $user->roles[2] == 'authenticated user' && $user->roles[4] == 'Manager') || ($user->roles[2] == 'authenticated user' && $user->roles[4] == 'Manager') || ($user->roles[2] == 'authenticated user' && $user->roles[4] == 'Manager') || ($user->roles[3] == 'administrator' && $user->roles[2] == 'authenticated user' )){
          node_save($node);
            if($form_state['values']['op'] == 'Save & Close'){
              drupal_goto('/dashboard');
            }
            else if($form_state['values']['op'] == 'Save & New'){
                if ($node->type == 'manifest') {
                    drupal_set_message('Your manifest has been saved');
                    drupal_goto('/dashboard');
                }
                else {
                    drupal_goto('node/add/'.$node->type);
                }
            }
            else{
              drupal_goto('node/'.$node->nid.'/edit');
            }

          }
          }
      else if($node->status == 0){
         if($user->roles[2] == 'authenticated user'&& $user->roles[3] != 'administrator' && $user->roles[4] != 'Manager'){
         node_save($node);
         drupal_goto('node/'.$node->nid);
         }
         else if(($user->roles[3] == 'administrator' && $user->roles[2] == 'authenticated user' && $user->roles[4] == 'Manager') || ($user->roles[2] == 'authenticated user' && $user->roles[4] == 'Manager') || ($user->roles[2] == 'authenticated user' && $user->roles[4] == 'Manager') || ($user->roles[3] == 'administrator' && $user->roles[2] == 'authenticated user' )){
          node_save($node);
            if($form_state['values']['op'] == 'Save & Close'){
              drupal_goto('/dashboard');
            }
            else if($form_state['values']['op'] == 'Save & New'){
                if ($node->type == 'manifest') {
                    drupal_set_message('Your manifest has been saved');
                    drupal_goto('/dashboard');
                }
                else {
                    drupal_goto('node/add/'.$node->type);
                }
            }
            else{
             drupal_goto('node/'.$node->nid.'/edit');
            }
          }
      }
  }
}

function jobs_data_print_ajax(){
  $nids_string=$_POST['nid_string'];
  $nids= explode(',',$nids_string);
  $count_job=count($nids);
  $j_count=0;
  $i_count=0;
  $i_val=0;
  foreach($nids as $node_load) {
      $j_count+=1;
      $job_load=node_load($node_load);
      foreach ( $job_load->field_items['und'] as $iid) {
        $i_count+=1;
        $item= field_collection_item_load($iid['value']);
        foreach ($item->field_qty['und'] as $qty_id) {
          $qty_load=$qty_id['value'];
          $i_val+=$qty_load;
        }
      }
  }
    $result = array('nids'=>$nids_string ,'select_job' =>$count_job,'total_jobs' =>$j_count,'total_items' =>$i_count,'total_qty' =>$i_val);
    drupal_json_output( $result);
    exit();
}

function job_labels_print_pdf(){
    $html = theme('jobs_print');
    $page_id = $_GET['id'];
    $page_exp = explode("-", $page_id);
    $node = node_load($page_exp[0]);
    $pdf_job = $node->field_job_no['und'][0]['value'];
    pdf_using_mpdf_api($html, $pdf_job, 'labels');
 }

 function manifest_data_print_ajax(){
   $nids_string=$_POST['nid_string'];
   $nids= explode(',',$nids_string);
   $count_manifest=count($nids);
   $j_count=0;
   $i_count=0;
   $i_val=0;
   foreach($nids as $node_load) {
     $manifest= node_load($node_load);
     foreach ($manifest->field_avaiable_jobs[und] as $job) {
       $j_count+=1;
       $job_load=node_load($job['target_id']);
       foreach ( $job_load->field_items['und'] as $iid) {
         $i_count+=1;
         $item= field_collection_item_load($iid['value']);
         foreach ($item->field_qty['und'] as $qty_id) {
           $qty_load=$qty_id['value'];
           $i_val+=$qty_load;
         }
       }
     }
   }
     $result = array('nids'=>$nids_string ,'select_manifest' =>$count_manifest,'total_jobs' =>$j_count,'total_items' =>$i_count,'total_qty' =>$i_val);
     drupal_json_output( $result);
     exit();
   }

   function manifest_labels_print_pdf(){
   	  $html = theme('labels_print');
   	  $page_id = $_GET['id'];
      $page_exp = explode("-", $page_id);
      $node = node_load($page_exp[0]);
      pdf_using_mpdf_api($html, $page_exp[0]);
   }

   function fest_data_print_pdf(){
     $html = theme('manifest_print');
     $page_id = $_GET['nid'];
     pdf_using_mpdf_api($html, 'manifest-'.$page_id);
   }

function wards_custom_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode){
    $options = array('language' => field_valid_language($langcode));
     $default_options = array(
       'default' => FALSE,
       'deleted' => FALSE,
       'language' => NULL,
     );
     $options += $default_options;
     list(, , $bundle) = entity_extract_ids($entity_type, $entity);
     $instances = _field_invoke_get_instances($entity_type, $bundle, $options);
     $return = array();
     foreach ($instances as $instance) {
       $field = field_info_field_by_id($instance['field_id']);
       $field_name = $field['field_name'];
       if($field_name == "field_items"){
        if($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED){
         if(isset($form[$field['field_name']]['und']['add_more'])){
           $form[$field['field_name']]['add_more_number'] = array(
             '#type' => 'textfield',
             '#default_value' => 1,
             '#prefix' => '<div class ="collection-rows">',
             '#suffix' => '<span>row(s)</span></div>'
           );
           $form[$field['field_name']]['und']['add_more']['#submit'][] = 'wards_custom_field_add_more_submit';
           $form[$field['field_name']]['und']['add_more']['#value'] = 'Add';
         }
       }
      }
     }
   }

   function wards_custom_field_add_more_submit($form, &$form_state){
     $button = $form_state['triggering_element'];
     $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
     $field_name = $element['#field_name'];
     $langcode = $element['#language'];
     $parents = $element['#field_parents'];
     $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
     $numbtoadd = $form[$field_name]['add_more_number']['#value'] - 1;
     if($numbtoadd){
       $field_state['items_count'] += $numbtoadd;
       field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
       $form_state['rebuild'] = TRUE;
     }
   }

   function wards_custom_action_info() {
     return array(
     'wards_custom_my_custom_action' => array(
       'type' => 'entity',
       'label' => t('SMS'),
       'behavior' => array('changes_property'),
       'configurable' => FALSE,
       'vbo_configurable' => FALSE,
       'triggers' => array('any'),
     ),
   );
  }

  function wards_custom_my_custom_action(&$entity, $context = array()) {
    $node_load = $entity->nid;
    $node = node_load($node_load);
    if(is_object($node) &&  $node->type == 'job'){
     $msg = 'Connote No. - '.$node->field_connote_no[LANGUAGE_NONE][0]['value'].'   https://fms.wardsgroup.com.au/?q=job/data/print/pdf&job_id='.$node->nid;
     if(isset($node->field_assigned_driver[LANGUAGE_NONE][0]['target_id'])){
     $tid = $node->field_assigned_driver[LANGUAGE_NONE][0]['target_id'];
     $term = taxonomy_term_load($tid);
     $phone = $term->field_phone_number[LANGUAGE_NONE][0]['value'];
     $message=urlencode($msg);
     $parameters="username=ashley.ward@wardstransport.com.au&api_password=!W@rds2003&sender=&to=".$phone."&message=".$message."&priority=11&from=Wards_TPT";
     $url="https://app.wholesalesms.com.au/api/v2/send-sms.json";
     $ch = curl_init($url);
     $get_url=$url."?".$parameters;
     curl_setopt($ch, CURLOPT_POST,0);
     curl_setopt($ch, CURLOPT_URL, $get_url);
     curl_setopt($ch, CURLOPT_FOLLOWLOCATION,1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        'Authorization: Basic ODViOTdlNDg0OTU4NTU4NzMyOTg1MmVkNTU1OTNkMDE6MTY3MGNmMDJjYjUyODI3NDQ2ZDE3OGZiYTQyM2ZkMWU='
         ));
     curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
     $return_val = curl_exec($ch);
    }
    }
    if(is_object($node) &&  $node->type == 'manifest'){

     $msg = 'Manifest - '.$node->nid.'   https://fms.wardsgroup.com.au/?q=fest/data/print/pdf&nid='.$node->nid;
     if(isset($node->field_drivers[LANGUAGE_NONE][0]['tid'])){
     $tid = $node->field_drivers[LANGUAGE_NONE][0]['tid'];
     $term = taxonomy_term_load($tid);
     $phone = $term->field_phone_number[LANGUAGE_NONE][0]['value'];
     $message=urlencode($msg);
     $parameters="username=ashley.ward@wardstransport.com.au&api_password=!W@rds2003&sender=&to=".$phone."&message=".$message."&priority=11&from=Wards_TPT";
     $url="https://app.wholesalesms.com.au/api/v2/send-sms.json";
     $ch = curl_init($url);
     $get_url=$url."?".$parameters;
     curl_setopt($ch, CURLOPT_POST,0);
     curl_setopt($ch, CURLOPT_URL, $get_url);
     curl_setopt($ch, CURLOPT_FOLLOWLOCATION,1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        'Authorization: Basic ODViOTdlNDg0OTU4NTU4NzMyOTg1MmVkNTU1OTNkMDE6MTY3MGNmMDJjYjUyODI3NDQ2ZDE3OGZiYTQyM2ZkMWU='
         ));
     curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
     $return_val = curl_exec($ch);
    }
    }
  }


function wards_custom_cron() {
  //86400
  $job_last_run = variable_get('job_last_run');
  $time_left = time()-$job_last_run;
  if($time_left >= 60 || empty($job_last_run)){
  custom_job_invoice_no_update();
   }
}

function custom_job_invoice_no_update(){
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'job')
    ->fieldCondition('field_job_status', 'target_id', 41)
    ->execute();
foreach($result['node'] as $nodes){
$node = node_load($nodes->nid);
$job_result = db_select('field_revision_field_job_status', 'c')
    ->fields('c',array('field_job_status_target_id'))
    ->condition('entity_id', $nodes->nid,'=')
    ->execute()
    ->fetchAll();
$jobs_status = array();
foreach($job_result as $value){
$jobs_status[] = $value->field_job_status_target_id;
}
if(in_array(55, $jobs_status)){
	$jb_sts = 1;
} else {
	$jb_sts = 0;
}
if($node->field_sender_manual_entry[LANGUAGE_NONE][0]['value'] == 0){
$origin = field_collection_item_load($node->field_origin[LANGUAGE_NONE][0]['value']);
$suburbFrom = $origin->field_suburb_[LANGUAGE_NONE][0]['value'];
} else {
$origin = field_collection_item_load($node->field_sender_third_party[LANGUAGE_NONE][0]['value']);
$suburbFrom = $origin->field_sender_suburb[LANGUAGE_NONE][0]['value'];
}
if($node->field_receiver_manual_entry[LANGUAGE_NONE][0]['value'] == 0){
$destination = field_collection_item_load($node->field_destination[LANGUAGE_NONE][0]['value']);
$suburbTo = $destination->field_suburb_[LANGUAGE_NONE][0]['value'];
} else {
$destination = field_collection_item_load($node->field_receiver_third_party[LANGUAGE_NONE][0]['value']);
$suburbTo = $destination->field_receiver_suburb[LANGUAGE_NONE][0]['value'];
}
if(empty($node->field_invoice_no) || $node->field_invoice_no[LANGUAGE_NONE][0]['value'] ==''){
 $customer = node_load($node->field_customer[LANGUAGE_NONE][0]['target_id']);
 $customer_name = $customer->title;
 $fcid= $customer->field_account_details[LANGUAGE_NONE][0]['value'];
 $account_details = field_collection_item_load($fcid);
 $account_code = $account_details->field_account_code[LANGUAGE_NONE][0]['value'];
 $postvar='';
 $price_plan = node_load($customer->field_pricing_plan[LANGUAGE_NONE][0]['target_id']);
if(!empty($price_plan)){
if(!empty($price_plan->field_con_fee)){
$con = $price_plan->field_con_fee[LANGUAGE_NONE][0]['value'];
$postvar .='&con='.$con;
}
if(!empty($price_plan->field_fuel_levy)){
$fuel = $price_plan->field_fuel_levy[LANGUAGE_NONE][0]['value'];
$postvar .='&fuel='.$fuel;
}
if(!empty($price_plan->field_futile_pickup_fee)){
$futile = $price_plan->field_futile_pickup_fee[LANGUAGE_NONE][0]['value'];
$postvar .='&futile='.$futile;
}
} else {
$postvar .='&con=0';
$postvar .='&fuel=0';
$postvar .='&futile=0';
}
if(!empty($node->field_include_pickup_fee) && $node->field_include_pickup_fee[LANGUAGE_NONE][0]['value'] == 1){
if(!empty($price_plan) && !empty($price_plan->field_pickup_fee)){
$pickup_fee = $price_plan->field_pickup_fee[LANGUAGE_NONE][0]['value'];
$postvar .='&pickup_fee='.$pickup_fee;
} else {
$postvar .='&pickup_fee=0';
}
}
 if($node->field_collection_charge[LANGUAGE_NONE][0]['value'] == 1) {
     $postvar .='&tp_charge='.$node->field_cost[LANGUAGE_NONE][0]['value'];
  }
if(!empty($node->field_include_delivery_fee) && $node->field_include_delivery_fee[LANGUAGE_NONE][0]['value'] == 1){
if(!empty($price_plan) && !empty($price_plan->field_delivery_fee)){
$dlvry_fee = $price_plan->field_delivery_fee[LANGUAGE_NONE][0]['value'];
$postvar .='&dlvry_fee='.$dlvry_fee;
} else {
$postvar .='&dlvry_fee=0';
}
}
$cannote_no = $node->field_connote_no[LANGUAGE_NONE][0]['value'];
$postvar .='&cannote_no='.$cannote_no;
if(!empty($node->field_handling_fee)){
$handling_fee = $node->field_handling_fee[LANGUAGE_NONE][0]['value'];
$postvar .='&handling_fee='.$handling_fee;
}
if(!empty($node->field_hand_unload_fee)){
$unload_fee = $node->field_hand_unload_fee[LANGUAGE_NONE][0]['value'];
$postvar .='&unload_fee='.$unload_fee;
}
$item_arr = array();
foreach($node->field_items[LANGUAGE_NONE] as $items){
$field_item = field_collection_item_load($items['value']);
$term = taxonomy_term_load($field_item->field_item_type[LANGUAGE_NONE][0]['target_id']);
if($field_item->field_cost[LANGUAGE_NONE][0]['value']!=0){
$item_arr[] = array('item'=>$term->name,'item_desc'=>$field_item->field_description[LANGUAGE_NONE][0]['value'],'item_qty'=>$field_item->field_qty[LANGUAGE_NONE][0]['value'],'item_from'=>$suburbFrom,'item_to'=>$suburbTo,'price'=>$field_item->field_cost[LANGUAGE_NONE][0]['value']);
}
}
$itm_ar = json_encode($item_arr);
$postvar .='&item_arr='.$itm_ar;
$postvar .='&job_status='.$jb_sts;
if(!empty($node->field_reference) && !empty($node->field_reference[LANGUAGE_NONE])){
	$postvar .='&reference='.$node->field_reference[LANGUAGE_NONE][0]['value'];
}

$url = 'http://203.201.136.64/invoice-insert.php';
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS,"postvar1=fsm&postvar2=".$customer_name."&postvar4=".$account_code.$postvar);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $server_output = curl_exec ($ch);
        curl_close ($ch);
if($server_output !=''){
$node->field_invoice_no[LANGUAGE_NONE][0]['value'] = $server_output;
$node->field_job_status[LANGUAGE_NONE][0]['target_id'] = 239;
    node_save($node);
}
}
}
variable_set('job_last_run',time());
}

//UPDATED BY LEE
function wards_custom_field_widget_form_alter(&$element, &$form_state, $context) {

    if ($element['#field_name'] == 'field_pricing_details') {
        $items = $context['items'];

        dpm($element);

        $element['container']['add']['#ajax'] =  array(
            'callback' => 'pricing_field_collection_ajax_add_item_callback'
        );

        foreach ($items as $delta => $item) {
            $element['container']['collection']['widget'][$delta]['_operations']['edit']['#ajax'] = array(
                'callback' => 'pricing_field_collection_ajax_edit_item_callback'
            );
        }
    }

    if ($element['#field_name'] == 'field_items') {
        dpm($element);
    }

//    if ($form_state['build_info']['form_id'] == 'job_node_form') {
//        if ($element['remove_button']['#name'] == 'field_items_und_0_remove_button') {
//
//            dpm($context['instance']['widget']['type']);
//
//            $field_parents = $element['#field_parents'];
//            $field_name = $element['#field_name'];
//            $language = $element['#language'];
//
//            $parents = array_merge($field_parents, array($field_name, $language, $context['delta']));
//
//
//            $element['copy_button'] = array(
//                '#delta' => $context['delta'],
//                '#name' => implode('_', $parents) . '_copy_button',
//                '#type' => 'submit',
//                '#value' => t('Copy'),
//                '#validate' => array(),
//                '#submit' => array('field_collection_remove_submit'),
//                '#limit_validation_errors' => array(),
//                '#ajax' => array(
//                    // 'wrapper' is filled in field_collection_field_attach_form().
//                    'callback' => 'field_collection_copy_js',
//                    'effect' => 'fade',
//                ),
//                '#weight' => 100,
//            );
//        }
//    }
}

function wards_custom_field_widget_text_textarea_with_summary_form_alter(&$element, &$form_state, $context) {
    if ($element['#field_name'] == 'field_notes') {
        $element['#theme'] = 'note_widget_multiple';
    }
//    dpm($element);
}

/**
 * AJAX form callback to render the add item form.
 */
function pricing_field_collection_ajax_edit_item_callback($form, &$form_state) {
    $button = $form_state['triggering_element'];
    $element = drupal_array_get_nested_value($form, $button['#element_address']);

    $field_state = field_collection_ajax_get_state($element, $form_state);

    // Fetch the item based on the #delta stored in the button.
    $field_collection_item = field_collection_field_get_entity($field_state['items'][$button['#delta']], $element['#field_name']);

    // Set up a form_state for the add item form..
    $edit_item_form_state = array(
        'element_address' => $element['#parents'],
        'original_form_id' => $form['#build_id'],
        'field_collection_item' => $field_collection_item,
        'delta' => $button['#delta'],
        'language' => $element['#language'],
    );

    // Build the new form.
    $edit_item_form = drupal_build_form('field_collection_ajax_edit_item_form', $edit_item_form_state);

    // Render the form onto the landing pad.
    $commands[] = ajax_command_html(field_collection_ajax_identifier($element, '.landing-pad'), theme('status_messages') . drupal_render($edit_item_form));
    $commands[] = array(
        'command' => 'fcajaxScrollTop',
        'selector' => field_collection_ajax_identifier($element, '.landing-pad'),
    );

    //Added
    $commands[] = array(
        'command' => 'display_modal_instead_bottom',
        'selector' => field_collection_ajax_identifier($element, '.landing-pad'),
    );

    return array('#type' => 'ajax', '#commands' => $commands);
}

function pricing_field_collection_ajax_add_item_callback($form, &$form_state) {
    $element = drupal_array_get_nested_value($form, $form_state['triggering_element']['#element_address']);

    $field_state = field_collection_ajax_get_state($element, $form_state);

    // Create a new item for the purposes of editing.
    $field_collection_item = entity_create('field_collection_item', array('field_name' => $element['#field_name']));

    // Set up a form_state for the add item form..
    $add_item_form_state = array(
        'element_address' => $element['#parents'],
        'original_form_id' => $form['#build_id'],
        'field_collection_item' => $field_collection_item,
        'delta' => $field_state['items'] ? max(array_keys($field_state['items'])) + 1 : 0,
        'language' => $element['#language'],
    );

    // Build the new form.
    $add_item_form = drupal_build_form('field_collection_ajax_edit_item_form', $add_item_form_state);

    // Render the form onto the landing pad.
    $commands[] = ajax_command_html(field_collection_ajax_identifier($element, '.landing-pad'), theme('status_messages') . drupal_render($add_item_form));
    $commands[] = array(
        'command' => 'fcajaxScrollTop',
        'selector' => field_collection_ajax_identifier($element, '.landing-pad'),
    );

    $commands[] = array(
        'command' => 'display_modal_instead_bottom',
        'selector' => field_collection_ajax_identifier($element, '.landing-pad'),
    );

    return array('#type' => 'ajax', '#commands' => $commands);
}

//function wards_custom_build_item_table_alter(&$element, $field_state) {
//    dpm($element);
//    dpm($field_state['items']);
//}